<?php

/**
 * @file
 * Custom module for small, utility-type routines.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Entity\EntityInterface;
use Drupal\migrate\Plugin\MigrationInterface;
use Drupal\migrate\Plugin\MigrateSourceInterface;
use Drupal\migrate\Row;
use GuzzleHttp\Exception\RequestException;

/**
 * Implements hook_entity_presave().
 */
function uwm_res_import_entity_presave(EntityInterface $entity) {

  if ($entity->bundle() === "res_provider") {
    $v2 = $entity->field_res_isacceptingnewpts->value;
    $entity->field_res_isacceptingnewpts->value = (int) $v2;
  }

}

/**
 * Implements hook_migrate_prepare_row().
 */
function uwm_res_import_prepare_row(Row $row, MigrateSourceInterface $source, MigrationInterface $migration) {
  $t = 0;
}

/**
 * Implements hook_migration_plugins_alter().
 */
function uwm_res_import_migration_plugins_alter(&$migrations) {

  foreach ($migrations as $id => &$migration) {

    /***
     * If finding one of our @Reservoir to @Stevie migrations, for example, the
     * clinics import or expertise terms import, update the source URLs to
     * include the long list from @Reservoir:
     */
    if (stripos($migration['id'], 'uwm_res_') !== FALSE) {
      _uwm_res_import_migration_plugins_alter($migration);
    }

  }

}

/**
 * Helper function to handle clinics and providers.
 *
 * @param array $migration
 *   The migration to alter.
 */
function _uwm_res_import_migration_plugins_alter(array &$migration) {

  if (isset($migration['source']['urls'])) {
    $base_urls = $migration['source']['urls'];

    // Make sure $base_urls is an array.
    if (!is_array($base_urls)) {
      $base_urls = [$base_urls];
    }

    $source_urls = _uwm_res_import_get_migration_source_urls($base_urls);
    $migration['source']['urls'] = $source_urls;

    \Drupal::logger(__FUNCTION__)
      ->info('Added URLs:' . __FUNCTION__ . ':' . $migration['id'] . ':' . json_encode($source_urls));

  }
}

/**
 * Get migration source URLs.
 *
 * @param array $base_urls
 *   The base URLs.
 *
 * @return array
 *   The source URLs.
 */
function _uwm_res_import_get_migration_source_urls(array $base_urls) {
  $source_urls = [];

  // Derive all of the source URLs from the base URLs.
  foreach ($base_urls as $base_url) {
    // Make sure the base URL has a trailing slash before any query.
    $base_url_parts = explode('?', $base_url);
    $base_url = $base_url_parts[0];
    if (substr($base_url_parts[0], -1) != '/') {
      $base_url .= '/';
    }
    $base_url .= !empty($base_url_parts[1]) ? '?' . $base_url_parts[1] : '';

    // Get the data from the base URL.
    $data = _uwm_res_import_get_migration_data($base_url);

    // Set the first source URL.
    if (isset($data['links']['self'])) {
      $source_urls[] = $data['links']['self'];

      // Set the remaining source URLs.
      while (isset($data['links']['next'])) {
        $source_urls[] = $data['links']['next'];
        $data = _uwm_res_import_get_migration_data($data['links']['next']);
      }
    }
  }

  return array_unique($source_urls);
}

/**
 * Get migration data from a URL.
 *
 * @param string $url
 *   The URL from which to retrieve the data.
 *
 * @return array
 *   The data.
 */
function _uwm_res_import_get_migration_data($url) {

  $data = [];

  $useCache = TRUE;
  $cacheKey = preg_replace("/[^A-Za-z0-9]/", '', $url);
  $cacheItemExpires = time() + 23 * 60 * 60;

  if (stripos($cacheKey, 'offset0') !== FALSE) {
    $useCache = FALSE;
  }

  // Retrieve the JSON data from the URL.
  try {

    if ($useCache) {

      $cacheResult = \Drupal::cache()->get($cacheKey, FALSE);
      $data = $cacheResult->data ?? [];

    }

    if (empty($data['links']['self'])) {

      $response = \Drupal::service('http_client')->get($url);

      /** @var \Psr\Http\Message\StreamInterface $body */
      $body = $response->getBody();
      $json = $body->getContents();

      $data = Json::decode($json);

      \Drupal::cache()->set($cacheKey, $data, $cacheItemExpires);

    }

  }
  catch (RequestException $e) {

    watchdog_exception('uwm_res_import', $e, $e->getMessage());
    return $data;

  }

  return $data;
}
