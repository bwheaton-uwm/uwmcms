<?php

/**
 * @file
 * Module for reading an API and providing API data to themes.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\Entity\NodeType;

/**
 * Implements hook_help().
 */
function uwmcs_reader_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.uwmcs_reader':
      return t('
        <h2>UWMCS JSON Reader generator for Drupal.</h2>
        <h3>Instructions</h3>
        <p>UWMCS JSON Reader dolor sit amet... <strong>Just kidding!</strong></p>
        <p>Unpack in the <em>modules</em> folder (currently in the root of your Drupal 8 installation) and enable in <strong>/admin/modules</strong>.</p>
        <p>Then, visit <strong>/admin/config/development/uwmcs_reader</strong> and enter your own set of phrases to build random-generated text (or go with the default UWMCS JSON Reader).</p>
        <p>Last, visit <strong>www.example.com/uwmcs_reader/generate/P/S</strong> where:</p>
        <ul>
          <li><em>P</em> is the number of <em>paragraphs</em></li>
          <li><em>S</em> is the maximum number of <em>sentences</em></li>
        </ul>
        <p>There is also a generator block in which you can choose how many paragraphs and
phrases and it\'ll do the rest.</p>
        <p>If you need, there\'s also a specific <em>generate uwmcs reader</em> permission.</p>
        <h3>Attention</h3>
        <p>Most bugs have been ironed out, holes covered, features added. But this module is a work in progress. Please report bugs and suggestions, ok?</p>
      ');
  }

}

/**
 * Implements hook_node_view().
 */
function uwmcs_reader_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  $build['#cache']['max-age'] = 0;

  // dpm($build);
  // dpm($view_mode);
  drupal_set_message(t('it is working'));

  if ($display->getComponent('my_own_pseudo_field')) {

    $build['my_own_pseudo_field'] = [
      '#type' => 'markup',
      '#markup' => 'This is my custom content',
    ];
  }

}

/**
 * Implements hook_entity_view().
 */
function uwmcms_reader_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  if ($display->getComponent('mymodule_addition')) {

  }

}

/**
 * Implements hook_node_load().
 */
function uwmcms_reader_node_load($nodes, $types) {

  $nids = array_keys($nodes);
  ksort($nids);
  sort($types);

  foreach ($nodes as $node) {

    $node->node_test_loaded_nids = $nids;
    $node->node_test_loaded_types = $types;

  }

}

/**
 * Implements hook_entity_load().
 */
function uwmcs_reader_entity_load(array $entities, $entity_type_id) {

  if ($entity_type_id === 'node') {

    foreach ($entities as $entity) {
      $entity->uwmcs_reader_entity_load = 123;
    }

  }

}

/**
 * Implements hook_entity_presave().
 */
function uwmcs_reader_entity_presave(EntityInterface $entity) {

  switch ($entity->bundle()) {

    // Here you modify only your day content type.
    case 'day':
      // Setting the title with the value of field_date.
      $entity->setTitle($entity->get('field_date')->value);
      break;

  }

}

/**
 * Implements hook_entity_extra_field_info().
 */
function uwmcs_reader_entity_extra_field_info() {
  $extra = [];

  foreach (NodeType::loadMultiple() as $bundle) {
    $extra['node'][$bundle->Id()]['display']['my_own_pseudo_field'] = [
      'label' => t('My own field'),
      'description' => t('This is my own pseudo-field'),
      'weight' => 100,
      'visible' => FALSE,
    ];
  }

  return $extra;
}
