<?php

/**
 * @file
 * Custom module for small, utility-type routines.
 */

use Drupal\uwm_commands\Commands\UwmTempImportClinicImage;
use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\views\ViewExecutable;
use Drupal\Core\Url;

/**
 * Implements hook_entity_presave().
 */
function uwmcs_utils_entity_presave(EntityInterface $entity) {

  $t = 0;

}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function uwmcs_utils_menu_link_content_presave(EntityInterface $entity) {

  // Set new menu links to show as expanded by default
  // if ($entity->menu_name->value == 'main') {.
  $entity->expanded = 1;

}

/**
 * Implements hook_page_attachments().
 */
function uwmcs_utils_page_attachments(array &$attachments) {

  $attachments['#attached']['library'][] = 'uwmcs_utils/uwm-page-css';

  $admin_context = \Drupal::service('router.admin_context');
  if ($admin_context->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'uwmcs_utils/uwm-admin-css';
  }

}

/**
 * Implements hook_preprocess_page().
 */
function uwmcs_utils_preprocess_page(&$vars) {

  // @TODO: Remove after one-time import:
  $qp = \Drupal::request()->query->all();
  if (!empty($qp['temp-import-clinic-images-mapping-file'])) {

    // module_load_include('php', 'uwm_commands',
    // 'src/Classes/UwmTempImportClinicImage.php');.
    $f = trim(`pwd`) . '/modules/custom/uwm_commands/src/Classes/UwmTempImportClinicImage.php';
    if (is_file($f)) {

      require_once $f;
      $importer = new UwmTempImportClinicImage();
      $importer::saveClinicImagesLocally($qp['temp-import-clinic-images-mapping-file']);

    }
  }

}

/**
 * Implements hook_entity_view_mode_alter().
 */
function uwmcs_utils_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
}

/**
 * Implements hook_entity_field_access().
 */
function uwmcs_utils_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {

  $allowedFields = [
    'field_clockwise_id',
    'field_clinic_wait_time_snippet',
    'title',
  ];

  $account = \Drupal::currentUser();
  if ($operation === 'edit' && !$account->hasPermission('administer nodes') &&
    in_array('staff_clinic_manager', $account->getRoles())
  ) {

    if (in_array($field_definition->getName(), $allowedFields)) {

      return AccessResult::neutral();
    }

    return AccessResult::forbidden();
  }

  return AccessResult::neutral();

}

/**
 * Implements hook_views_pre_view().
 */
function uwmcs_utils_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  if ($view->id() == 'clinic_hours') {
    // $args[0] = '4566';.
  }

}

/**
 * Implements hook_entity_view_alter().
 */
function uwmcs_utils_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  /***
   * Add term names safe for templates:
   */
  $stylingFields = [
    'field_content_blocks_style',
    'field_body_style_terms',
  ];
  foreach ($stylingFields as $fieldName) {

    if (isset($build[$fieldName])) {

      $classes = [];
      $fieldTerms = $entity->get($fieldName)->getValue();

      foreach ($fieldTerms as $fieldTerm) {

        $term = $terms = Term::load($fieldTerm['target_id']);

        if (!empty($term->name->value)) {
          $classes[] = Html::getClass('uwmterms__' . $term->name->value);
        }

        if (!empty($term->field_code_label->value)) {
          $classes[] = Html::getClass('uwmterms__' . $term->field_code_label->value);
        }

      }

      if (!empty($classes)) {

        $classes[] = Html::getClass('uwmterms');
        $classes[] = Html::getClass('uwmterms__' . $fieldName);
      }

      $build[$fieldName]['#uwm_678891'] = $classes;

    }

  }

}

/**
 * Implements hook_acquia_contenthub_process_webhook_alter().
 *
 * This function and code from Acquia deletes content from this site
 * if it has been deleted from the original Content Hub publishing site.
 *
 * @see https://docs.acquia.com/lift/contenthub/sharing/delete/
 */
function uwmcs_utils_acquia_contenthub_process_webhook_alter($webhook) {

  if ($webhook['status'] == 'successful' && $webhook['crud'] == 'delete') {

    $entity_repository = \Drupal::service('entity.repository');
    foreach ($webhook['assets'] as $asset) {

      $entity = $entity_repository->loadEntityByUuid($asset['type'], $asset['uuid']);
      if ($entity) {

        $entity->delete();

      }

    }

  }

}

/**
 * Implements hook_toolbar().
 */
function uwmcs_utils_toolbar() {

  $items = [];

  if (!empty($_ENV['AH_SITE_ENVIRONMENT']) && !empty($_ENV['AH_SITE_GROUP'])) {

    $env = strtoupper('ENV-' . $_ENV['AH_SITE_GROUP'] . '-' . $_ENV['AH_SITE_ENVIRONMENT']);

    $items['uwm_env'] = [
      '#type' => 'toolbar_item',
      'tab' => [
        '#type' => 'link',
        '#title' => $env,
        '#url' => Url::fromRoute('<front>'),
        '#options' => [
          'attributes' => [
            'title' => $env,
            'class' => [
              strtolower($env), 'toolbar-item',
            ],
          ],
        ],
      ],
      '#weight' => 999,
    ];

  }

  return $items;

}
