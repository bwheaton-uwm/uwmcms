<?php

/**
 * @file
 * Custom module for small, utility-type routines.
 */

use Drupal\Core\Render\Markup;
use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\taxonomy\Entity\Term;
use Drupal\uwm_commands\Commands\UwmTempImportClinicImage;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_presave().
 */
function uwmcs_utils_entity_presave(EntityInterface $entity) {

  $t = 0;

}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function uwmcs_utils_menu_link_content_presave(EntityInterface $entity) {

  // Set new menu links to show as expanded by default
  // if ($entity->menu_name->value == 'main') {.
  $entity->expanded = 1;

}

/**
 * Implements hook_page_attachments().
 */
function uwmcs_utils_page_attachments(array &$attachments) {

  // Add our helper utility CSS rules for all users/ pages:
  $attachments['#attached']['library'][] = 'uwmcs_utils/uwm-page-css';

  // Add our helper utility CSS rules on administrative routes:
  $admin_context = \Drupal::service('router.admin_context');
  if ($admin_context->isAdminRoute()) {
    $attachments['#attached']['library'][] = 'uwmcs_utils/uwm-admin-css';
  }

}

/**
 * Implements hook_preprocess_html().
 */
function uwmcs_utils_preprocess_html(&$variables) {

  $variables['html_attributes'] = $variables['html_attributes'] ?? new Attribute();

  // Add details the environment and sub site:
  $variables['html_attributes']['site-uuid'] = \Drupal::config('system.site')
    ->get('uuid') ?? NULL;
  $variables['html_attributes']['site-env'] = $_ENV['AH_SITE_ENVIRONMENT'] ?? 'unknown';
  $variables['html_attributes']['site-file'] = __FILE__;

}

/**
 * Implements hook_preprocess_page().
 */
function uwmcs_utils_preprocess_page(&$vars) {

  // @TODO: Remove after one-time import:
  $qp = \Drupal::request()->query->all();
  if (!empty($qp['temp-import-clinic-images-mapping-file'])) {

    // module_load_include('php', 'uwm_commands',
    // 'src/Classes/UwmTempImportClinicImage.php');.
    $f = trim(`pwd`) . '/modules/custom/uwm_commands/src/Classes/UwmTempImportClinicImage.php';
    if (is_file($f)) {

      require_once $f;
      $importer = new UwmTempImportClinicImage();
      $importer::saveClinicImagesLocally($qp['temp-import-clinic-images-mapping-file']);

    }
  }

}

/**
 * Implements hook_entity_view_mode_alter().
 */
function uwmcs_utils_entity_view_mode_alter(&$view_mode, EntityInterface $entity, $context) {
}

/**
 * Implements hook_entity_field_access().
 */
function uwmcs_utils_entity_field_access($operation, FieldDefinitionInterface $field_definition, AccountInterface $account, FieldItemListInterface $items = NULL) {

  $allowedFields = [
    'field_clockwise_id',
    'field_clinic_wait_time_snippet',
    'title',
  ];

  $account = \Drupal::currentUser();
  if ($operation === 'edit' && !$account->hasPermission('administer nodes') &&
    in_array('staff_clinic_manager', $account->getRoles())
  ) {

    if (in_array($field_definition->getName(), $allowedFields)) {

      return AccessResult::neutral();
    }

    return AccessResult::forbidden();
  }

  return AccessResult::neutral();

}

/**
 * Implements hook_views_pre_view().
 */
function uwmcs_utils_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  if ($view->id() == 'clinic_hours') {
    // $args[0] = '4566';.
  }

}

/**
 * Implements hook_entity_view_alter().
 */
function uwmcs_utils_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {

  /***
   * Add term names safe for templates:
   */
  $stylingFields = [
    'field_content_blocks_style',
    'field_body_style_terms',
  ];
  foreach ($stylingFields as $fieldName) {

    if (isset($build[$fieldName])) {

      $classes = [];
      $fieldTerms = $entity->get($fieldName)->getValue();

      foreach ($fieldTerms as $fieldTerm) {

        $term = $terms = Term::load($fieldTerm['target_id']);

        if (!empty($term->name->value)) {
          $classes[] = Html::getClass('uwmterms__' . $term->name->value);
        }

        if (!empty($term->field_code_label->value)) {
          $classes[] = Html::getClass('uwmterms__' . $term->field_code_label->value);
        }

      }

      if (!empty($classes)) {

        $classes[] = Html::getClass('uwmterms');
        $classes[] = Html::getClass('uwmterms__' . $fieldName);
      }

      $build[$fieldName]['#uwm_678891'] = $classes;

    }

  }

}

/**
 * Implements hook_acquia_contenthub_process_webhook_alter().
 *
 * This function and code from Acquia deletes content from this site
 * if it has been deleted from the original Content Hub publishing site.
 *
 * @see https://docs.acquia.com/lift/contenthub/sharing/delete/
 */
function uwmcs_utils_acquia_contenthub_process_webhook_alter($webhook) {

  if ($webhook['status'] == 'successful' && $webhook['crud'] == 'delete') {

    $entity_repository = \Drupal::service('entity.repository');
    foreach ($webhook['assets'] as $asset) {

      $entity = $entity_repository->loadEntityByUuid($asset['type'], $asset['uuid']);
      if ($entity) {

        $entity->delete();

      }

    }

  }

}

/**
 * Implements hook_toolbar().
 */
function uwmcs_utils_toolbar() {

  $items = [];

  if (!empty($_ENV['AH_SITE_ENVIRONMENT']) && !empty($_ENV['AH_SITE_GROUP'])) {

    $env = strtoupper('ENV-' . $_ENV['AH_SITE_GROUP'] . '-' . $_ENV['AH_SITE_ENVIRONMENT']);

    $items['uwm_env'] = [
      '#type' => 'toolbar_item',
      'tab' => [
        '#type' => 'link',
        '#title' => $env,
        '#url' => Url::fromRoute('<front>'),
        '#options' => [
          'attributes' => [
            'title' => $env,
            'class' => [
              strtolower($env),
              'toolbar-item',
            ],
          ],
        ],
      ],
      '#weight' => 999,
    ];

  }

  return $items;

}

/**
 * Implements hook_form_FORM_ID_alter() for 'node_res_clinic_edit_form'.
 *
 * - On clinic nodes that are hospitals, remove the Providers field widget,
 * in case submitting the form would be too large of a request for the server.
 */
function uwmcs_utils_form_node_res_clinic_edit_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  $node = $form_state->getFormObject()->getEntity();

  // Clinic nodes that are hospitals may have hundreds of values in the
  // providers entity reference field. Since Reservoir synchronizes clinic
  // and provider entity ref fields that point to each other via
  // Corresponding Entity Reference fields, it's easier (and more accurate)
  // to keep that data in place.
  // Editing that many values on the node form can be problematic as the data
  // may be too large for requests. (Reservoir returned 413, Request Entity Too
  // Large, upon submitting node form.)
  if (!empty($form['field_res_providers'])) {
    if ($node->hasField('field_res_is_hospital') && !$node->get('field_res_is_hospital')
      ->isEmpty() && (boolean) $node->get('field_res_is_hospital')
      ->first()
      ->getValue()['value']) {

      // Remove the field widget.
      $form['field_res_providers']['widget']['#access'] = FALSE;

      // Use the form element container to display explanatory message for
      // content editors instead.
      $form['field_res_providers']['hospital_message'] = [
        '#theme' => 'status_messages',
        '#message_list' => [
          'warning' => [
            t("This clinic is a hospital. While provider references are managed in Reservoir, this field is removed here because a hospital may have so many providers that this form will not work correctly."),
          ],
        ],
        '#status_headings' => [
          'warning' => t('Warning message'),
        ],
      ];

    }
  }

}

/**
 * Implements hook_entity_prepare_view().
 *
 * - On clinic nodes that are hospitals, remove all values from the providers
 *   entity reference field, because there are too many to render.
 */
function uwmcs_utils_entity_prepare_view($entity_type_id, array $entities, array $displays, $view_mode) {

  if ($entity_type_id === 'node' && !empty($displays['res_clinic']) && !empty($entities)) {

    foreach ($entities as $node) {

      // Clinic nodes that are hospitals may have hundreds of values in the
      // providers entity reference field. Since Reservoir synchronizes clinic
      // and provider entity ref fields that point to each other via
      // Corresponding Entity Reference fields, it's easier (and more accurate)
      // to keep that data in place. Loading that many nodes to render must be
      // prevented though, as it is not performant.
      // This hook runs before the field render arrays are built, so we can
      // override the field value.
      if ($node->bundle() === 'res_clinic' && $node->hasField('field_res_is_hospital') && !$node->get('field_res_is_hospital')
        ->isEmpty() && (boolean) $node->get('field_res_is_hospital')
        ->first()
        ->getValue()['value']) {

        $node->get('field_res_providers')->setValue([]);

      }

    }

  }

}

/**
 * Implements hook_preprocess_views_view_field().
 */
function uwmcs_utils_preprocess_views_view_field(&$variables) {

  $view = $variables['view'];
  $field = $variables['field'];

  if ($view->id() == 'puma_education_admin_report' && $view->current_display == 'page_1' && $field->field == 'field_res_puma_education') {

    $node = $variables["row"]->_entity;
    if ($node->hasField('field_res_puma_education') &&
      $node->hasField('field_uwm_json_packet')) {

      $field1 = $field2 = '';

      $ed1 = json_decode($node->field_res_puma_education->value);
      $ed2 = json_decode($node->field_uwm_json_packet->value);

      if ($ed1) {
        foreach ($ed1 as $value) {
          $field1 .= '<li>[ ' .
            $value->university_from_date . ' | ' .
            $value->university_name . ' | ' .
            $value->type . ' | ' .
            $value->specialty . ' ]';
        }
      }
      if ($ed2 && isset($ed2->educationHistories)) {
        foreach ($ed2->educationHistories as $value) {
          $field2 .= '<li>[ ' .
            $value->startYear . ' | ' .
            $value->institutionName . ' | ' .
            $value->educationType . ' | ' .
            $value->specialty . ' ]';
        }
      }
    }

    $return = '<table><thead><tr><td>PUMA</td><td>IM</td></tr></thead><tr><td>' . $field1 . '</td><td>' . $field2 . '</td></tr></table><code>Diff: ' . (strlen($field1) - strlen($field2)) . '</code>';
    $variables['output'] = Markup::create($return);

  }

}
