<?php

/**
 * @file
 * Hook implementations and basic functionality for uwmed_uwmcms_search.
 */

use Drupal\Core\Form\FormState;
use Drupal\search_api\Query\QueryInterface;
use Solarium\Core\Query\QueryInterface as SolariumQueryInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_page_attachments_alter().
 *
 * Add libraries for search pages.
 */
function uwmed_uwmcms_search_page_attachments_alter(&$variables) {
  // Get the current path.
  $currentPath = \Drupal::service('path.current')->getPath();

  // Add the location search form library to the location search page.
  if (stripos($currentPath, '/search/locations') !== FALSE) {
    $variables['#attached']['library'][] = 'uwmed_uwmcms_search/location-search-form';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Customizes exposed forms for views.
 */
function uwmed_uwmcms_search_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  $storage = $form_state->getStorage();

  if (!isset($storage['view'])) {
    return;
  }

  $view = $storage['view'];

  switch ($view->id()) {
    case 'uwm_locations_geo_search':
      _uwmed_uwmcms_search_alter_locations_search_form($form, $form_state);
      break;

    case 'uwm_providers_search':
      _uwmed_uwmcms_search_alter_providers_search_form($form, $form_state);
      break;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function uwmed_uwmcms_search_views_pre_view($view, $display_id, &$args) {
  switch ($view->id()) {
    case 'uwm_locations_geo_search':
      _uwmed_uwmcms_search_views_pre_view_uwm_locations_geo_search($view, $display_id, $args);
      break;
  }
}

/**
 * Implements hook_views_pre_render().
 */
function uwmed_uwmcms_search_views_pre_render(ViewExecutable $view_ex) {

  switch ($view_ex->id()) {
    case 'uwm_providers_search':
      _uwmed_uwmcms_search_views_pre_render_uwm_providers_search($view_ex);
      break;

    case 'uwm_locations_geo_search':
      _uwmed_uwmcms_search_views_pre_render_uwm_locations_geo_search($view_ex);
      break;
  }

}

/**
 * Implements hook_preprocess_views_view().
 */
function uwmed_uwmcms_search_preprocess_views_view(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view_ex */
  $view_ex = $variables['view'];

  switch ($view_ex->id()) {
    case 'uwm_locations_geo_search':
      _uwmed_uwmcms_search_preprocess_views_view_uwm_locations_geo_search($variables);
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uwmed_uwmcms_search_preprocess_facets_item_list(&$variables) {
  $facet = $variables['facet'];

  // Remove any duplicates from the UWM Search Within field.
  if ($facet->getFieldIdentifier() == 'uwmsearchwithin') {
    $titles = [];
    foreach ($variables['items'] as $key => $item) {
      if (isset($item['value']['#title']['#value'])) {
        $title = $item['value']['#title']['#value'];
        if (in_array(strtolower($title), $titles)) {
          unset($variables['items'][$key]);
        }
        else {
          $titles[] = $title;
        }
      }
    }
  }
}

/**
 * Implements hook_search_api_autocomplete_suggestions_alter().
 */
function uwmed_uwmcms_search_search_api_autocomplete_suggestions_alter(array &$suggestions, array $alter_params) {
  $search = $alter_params['search'];
  $suggester_ids = $search->getSuggesterIds();

  // Only alter "Live Results" suggestions.
  if (!in_array('live_results', $suggester_ids)) {
    return;
  }

  // Define the indexes that should be altered.
  $autocomplete_indexes = [
    'uwm_providers_autocomplete_index',
    'uwm_locations_autocomplete_index',
  ];

  // For autocomplete indexes that should be altered.
  if (in_array($search->getIndexId(), $autocomplete_indexes)) {
    foreach ($suggestions as $suggestion) {
      // Remove the URL.
      $suggestion->setUrl(NULL);

      // If user input exists.
      if (isset($alter_params['user_input'])) {
        $user_input = $alter_params['user_input'];
        $label = trim($suggestion->getLabel());

        // If the label was not set, use the render element.
        if (empty($label)) {
          $render = $suggestion->getRender();
          $label = \Drupal::service('renderer')->render($render);
          $label = trim(strip_tags($label));
        }

        $label = str_replace('  ', ' ', $label);

        // Get the position of the user input in the label.
        $position = stripos($label, $user_input);

        // Determine the new prefix, user input, and suffix.
        if ($position !== FALSE) {
          $user_input_length = strlen($user_input);
          $suggestion_prefix = substr($label, 0, $position);
          $new_user_input = substr($label, $position, $user_input_length);
          $suggestion_suffix = substr($label, $position + $user_input_length);
        }
        else {
          $suggestion_prefix = $label;
          $new_user_input = NULL;
          $suggestion_suffix = NULL;
        }

        // Update the suggestion.
        $suggestion->setLabel(NULL);
        $suggestion->setRender(NULL);
        $suggestion->setUserInput($new_user_input);
        $suggestion->setSuggestionPrefix($suggestion_prefix);
        $suggestion->setSuggestionSuffix($suggestion_suffix);
      }
    }
  }
}

/**
 * Implements hook_preprocess_search_api_autocomplete_suggestion().
 */
function uwmed_uwmcms_search_preprocess_search_api_autocomplete_suggestion(&$variables) {
  $suggestion = $variables['suggestion_prefix'];

  // If the user input did not match exactly, try to match and
  // highlight the individual parts.
  if (empty($variables['user_input'])) {
    $user_input = $_GET['q'];

    // Create a proxy to keep track of characters matched.
    $proxy = $suggestion;

    foreach (explode(' ', $user_input) as $part) {
      $position = stripos($suggestion, $part);
      if ($position !== FALSE) {
        $part_length = strlen($part);

        // Replace the matched characters with asterisks.
        $asterisks = str_repeat('*', $part_length);
        $proxy = substr_replace($proxy, $asterisks, $position, $part_length);
      }
    }

    // If no characters matched, bail.
    if (strpos($proxy, '*') === FALSE) {
      return;
    }

    // Assemble the tagged suggestion.
    $tagged_suggestion = '';
    $in_tag = FALSE;
    $proxy_length = strlen($proxy);

    for ($i = 0; $i <= $proxy_length; $i++) {
      $char = substr($proxy, $i, 1);
      if ($char == '*') {
        if ($in_tag) {
          $tagged_suggestion .= substr($suggestion, $i, 1);
        }
        else {
          $tagged_suggestion .= '<strong>' . substr($suggestion, $i, 1);
          $in_tag = TRUE;
        }
      }
      else {
        if ($in_tag) {
          $tagged_suggestion .= '</strong>' . substr($suggestion, $i, 1);
          $in_tag = FALSE;
        }
        else {
          $tagged_suggestion .= substr($suggestion, $i, 1);
        }
      }
    }

    // Add a closing tag, if necessary.
    if ($in_tag) {
      $tagged_suggestion .= '</strong>';
    }

    // Ensure spaces after tags are preserved.
    $tagged_suggestion = str_replace('</strong> ', ' </strong>', $tagged_suggestion);

    $variables['suggestion_prefix'] = [
      '#markup' => $tagged_suggestion,
      '#allowed_tags' => ['strong'],
    ];
  }
}

/**
 * Implements hook_search_api_solr_query_alter().
 */
function uwmed_uwmcms_search_search_api_solr_query_alter(SolariumQueryInterface $solarium_query, QueryInterface $query) {
  // Don't alter the query if no search term has been submitted.
  if (!$query->getKeys()) {
    return;
  }

  $boosts = [];

  // Get Solr field names.
  $index = $query->getIndex();
  $solr_field_names = $index->getServerInstance()->getBackend()->getSolrFieldNames($index);

  // Add a boost for providers that are accepting new patients.
  $new_patients_field = $solr_field_names['field_res_isacceptingnewpts'] ?? '';
  if ($new_patients_field) {
    $boost_value = 55;
    $boosts[] = "($new_patients_field:1^$boost_value OR $new_patients_field:0^0)";
  }

  // Add a boost for providers that belong to at least one medical service.
  $medical_services_field = $solr_field_names['field_res_medical_services_boolean'] ?? '';
  if ($medical_services_field) {
    $boost_value = 21;
    $boosts[] = "($medical_services_field:1^$boost_value OR $medical_services_field:0^0)";
  }

  // Add the boosts to the query.
  if ($boosts) {
    $solarium_query->addParam('bq', $boosts);
  }
}

/**
 * Implements hook_preprocess_html().
 */
function uwmed_uwmcms_search_preprocess_html(&$variables) {

  $route_match = \Drupal::routeMatch();
  $route_params = $route_match->getParameters()->all();

  // Alter the head title for search result pages, corresponding to the
  // page title as managed by views.
  // @see _uwmed_uwmcms_search_views_pre_render_set_results_title()
  if (strpos($route_match->getRouteName(), 'view.') === 0 && in_array($route_params['view_id'], [
    'uwm_providers_search',
    'uwm_locations_geo_search',
  ]) && !empty($variables['page']['#title'])) {

    $current_title = $variables['page']['#title'];
    $original_title = NULL;
    $original_head_title = $variables['head_title']['title'];

    // Find the original page title from view configuration.
    $view = \Drupal::entityTypeManager()->getStorage('view')->load($route_params['view_id']);
    $display = $view->getDisplay($route_params['display_id']);
    if (!empty($display['display_options']['title'])) {
      $original_title = $display['display_options']['title'];
    }
    else {
      $display_default = $view->getDisplay('default');
      $original_title = $display_default['display_options']['title'];
    }

    // If the page title has been altered, update the head title too.
    if ($current_title !== $original_title) {

      $head_title = $current_title;

      // If the title string includes a different head title value, designated
      // by the custom delimiter, retrieve it.
      if (strpos($current_title, '[head_title]') !== FALSE) {
        $titles = explode('[head_title]', $current_title);
        $head_title = $titles[1];
      }

      // Replace pretty quotation marks (which would show up encoded).
      $head_title = str_replace(
        ['&lsquo;', '&rsquo;', '&ldquo;', '&rdquo;'],
        ['\'', '\'', '"', '"'],
        $head_title
      );

      // Replace the page title (token) part in the original head title.
      $head_title = str_replace($original_title, $head_title, $original_head_title);

      // Now that we have the full head title string, remove the "UW Medicine"
      // site name suffix if duplicated in the page title part.
      $head_title_suffix = '| UW Medicine';
      if (strrpos($head_title, $head_title_suffix) === (strlen($head_title) - strlen($head_title_suffix))) {
        $head_title_main = substr($head_title, 0, strrpos($head_title, '|'));
        if (strpos($head_title_main, 'UW Medicine') !== FALSE) {
          $head_title = $head_title_main;
        }
      }

      // Set variable according to incoming structure. The head_title is an
      // array, which is joined by '|'. Note that Metatag has already set this.
      // @see metatag_preprocess_html()
      $variables['head_title']['title'] = $head_title;

    }

  }

}

/**
 * Implements hook_preprocess_block__page_title_block().
 */
function uwmed_uwmcms_search_preprocess_block__page_title_block(&$variables) {

  if (!empty($variables['content']['#type']) && $variables['content']['#type'] === 'page_title') {

    // If a search view alteration has set a title string containing a different
    // page title and head title, remove the head title before rendering this
    // block.
    // @see _uwmed_uwmcms_search_views_pre_render_set_results_title()
    $title = $variables['content']['#title']['#markup'];
    if (strpos($title, '[head_title]') !== FALSE) {
      $titles = explode('[head_title]', $title);
      $variables['content']['#title']['#markup'] = $titles[0];
    }

  }
}

/**
 * Customize the locations search form.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormState $form_state
 *   The form state.
 */
function _uwmed_uwmcms_search_alter_locations_search_form(array &$form, FormState $form_state) {

  $form['use_my_location'] = [

    '#type' => 'container',
    '#attributes' => ['class' => ['use-my-location']],

    // Add a button to calculate user coordinates.
    'uml_button' => [
      '#prefix' => '<div class="use-my-location__prefix">' . t('or') . '</div>',
      '#markup' => '<button class="use-my-location__button btn btn-cta btn-cta-link" type="button">' . t('Use my location') . '</button>',
      '#allowed_tags' => ['button'],
    ],

    // Add a hidden field to hold calculated user coordinates.
    'latlng' => [
      '#type' => 'hidden',
      '#default_value' => \Drupal::request()->query->get('latlng'),
      '#attributes' => ['class' => ['use-my-location__coordinates']],
    ],

    // Add a container for a status message.
    'uml_status' => [
      '#markup' => '<div class="use-my-location__status"></div>',
      '#allowed_tags' => ['div'],
    ],

  ];

  $form['location_address_keywords'] = [

    '#type' => 'container',
    '#attributes' => ['class' => ['location-address-keywords']],

    'l' => [

      '#type' => 'textfield',
      '#size' => 30,
      '#default_value' => \Drupal::request()->query->get('l'),
      '#attributes' => [
        'placeholder' => 'Enter a zip code, neighborhood or city...',
        'autocomplete' => 'off',

      ],

      '#field_suffix' => '<a href="#" class="toggle-uml-dropdown" role="button" aria-haspopup="true" aria-expanded="false"></a>
<div class="dropdown"><div class="dropdown-menu"><a id="umlDropdownLink" href="#">Use my location</a></div></div>
<div class="status-message"></div>',
    ],

  ];

  if (isset($form['s'])) {

    // Use the autocomplete functionality from UWM Locations Autocomplete.
    $form['s']['#search_id'] = 'uwm_locations_autocomplete';

    $form['s']['#attributes']['class'][] = 'dm-form-item-collection';
    $form['s']['#attributes']['autocomplete'] = 'off';

    $form['s']['#weight'] = -10;
    $form['location_address_keywords']['#weight'] = -9;

  }

}

/**
 * Customize the providers search form.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormState $form_state
 *   The form state.
 */
function _uwmed_uwmcms_search_alter_providers_search_form(array &$form, FormState $form_state) {
  // Use the autocomplete functionality from UWM Providers Autocomplete.
  $form['s']['#search_id'] = 'uwm_providers_autocomplete';
}

/**
 * Alter the uwm_locations_geo_search view in the pre_view phase.
 */
function _uwmed_uwmcms_search_views_pre_view_uwm_locations_geo_search($view, $display_id, $args) {
  $exposed_input = $view->getExposedInput();

  // If the Use My Location coordinates are available, use them for
  // the distance filter.
  if (!empty($exposed_input['latlng'])) {
    $distance_filter = $view->getHandler($display_id, 'filter', 'field_coordinates_geofield_latlong');
    if ($distance_filter) {
      $distance_filter['value']['value'] = $exposed_input['latlng'];
      $view->setHandler($display_id, 'filter', 'field_coordinates_geofield_latlong', $distance_filter);
    }
  }
}

/**
 * Alter the uwm_providers_search view in the pre_render phase.
 */
function _uwmed_uwmcms_search_views_pre_render_uwm_providers_search(ViewExecutable $view_ex) {
  _uwmed_uwmcms_search_views_pre_render_set_results_title($view_ex);
}

/**
 * Alter the uwm_locations_geo_search view in the pre_render phase.
 */
function _uwmed_uwmcms_search_views_pre_render_uwm_locations_geo_search(ViewExecutable $view_ex) {
  _uwmed_uwmcms_search_views_pre_render_set_results_title($view_ex);
}

/**
 * Set a search view title according to results in the pre_render phase.
 */
function _uwmed_uwmcms_search_views_pre_render_set_results_title(ViewExecutable $view_ex) {

  $count = $view_ex->total_rows;

  $input = $view_ex->getExposedInput();

  // Retrieve any searched keywords.
  $keywords = NULL;
  if (!empty($input['s']) && is_string($input['s']) && strlen(trim($input['s'])) > 0) {
    $keywords = trim($input['s']);
  }

  // Retrieve Medical Specialty (or interim Areas of Expertise) term name(s)
  // from facet.
  $facet_key = NULL;
  switch ($view_ex->id()) {

    case 'uwm_providers_search':
      $facet_key = 'fs_p';
      break;

    case 'uwm_locations_geo_search':
      $facet_key = 'f';
      break;

  }

  // There may be links to pre-filtered searches with multiple values selected
  // in the facet (even if the user cannot select multiple in the dropdown).
  $specialty = [];
  if (!empty($facet_key) && !empty($input[$facet_key])) {
    // Note: for previously-used Medical Service vocabulary, this key was:
    // 'medical-service:'.
    $prefix = 'expertise:';

    foreach ($input[$facet_key] as $facet_val) {
      if (strpos($facet_val, $prefix) === 0) {
        $specialty_value = substr($facet_val, strlen($prefix));

        // Depending on how the facet and associated indexed value are set up,
        // the value used in the form field / query param may be either the
        // term ID or term name. Assume the ID if numeric, otherwise the name.
        if (is_numeric($specialty_value)) {
          $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load((int) $specialty_value);
          if (!empty($term)) {
            $specialty[] = $term->label();
          }
        }
        else {
          $specialty[] = $specialty_value;
        }
      }
    }
  }

  // Build the results title incorporating Specialty if used, otherwise keywords
  // if used, and number of results. The Specialty filter takes precedence over
  // keywords.
  $title = NULL;
  $head_title = NULL;

  $translation_mgr = \Drupal::translation();
  $args = [];
  $conjunction = NULL;

  switch ($view_ex->id()) {

    case 'uwm_providers_search':
      $args['@result_type_singular'] = t("provider");
      $args['@result_type_plural'] = t("providers");
      $conjunction = "in";
      break;

    case 'uwm_locations_geo_search':
      $args['@result_type_singular'] = t("location");
      $args['@result_type_plural'] = t("locations");
      $conjunction = "for";
      break;

  }

  if (!empty($specialty)) {

    // Combine multiple terms, if there are.
    $specialty = implode(", ", $specialty);

    // The term for Specialty may have only the first letter uppercased. Set
    // the first letter of each word to uppercase, to make it appear here as a
    // title and to match the values in filter dropdown.
    // @see uwmbase/components/search/search-dropdown/search-dropdown.html.twig
    $specialty = ucwords($specialty);

    $args = array_merge($args, [
      '@specialty' => $specialty,
    ]);

    $title = $translation_mgr->formatPlural(
      $count,
      "1 @result_type_singular {$conjunction} @specialty",
      "@count @result_type_plural {$conjunction} @specialty",
      $args
    );

    $head_title = $translation_mgr->formatPlural(
      $count,
      "1 @result_type_singular at UW Medicine {$conjunction} @specialty",
      "@count @result_type_plural at UW Medicine {$conjunction} @specialty",
      $args
    );

  }
  elseif (!empty($keywords)) {

    $title = $translation_mgr->formatPlural(
      $count,
      "1 @result_type_singular found for &ldquo;@keywords&rdquo;",
      "@count @result_type_plural found for &ldquo;@keywords&rdquo;",
      array_merge($args, [
        '@keywords' => $keywords,
      ])
    );

  }
  else {

    // If neither Specialty filter nor keywords were used, determine if a
    // search was run by checking for any non-empty inputs.
    $searched = FALSE;
    if (!empty($input)) {
      foreach ($input as $k => $v) {
        if (!empty($v)) {
          $searched = TRUE;
        }
      }
    }

    // Set a generic results title if search was run.
    if ($searched) {

      $title = $translation_mgr->formatPlural(
        $count,
        "1 @result_type_singular found",
        "@count @result_type_plural found",
        $args
      );

    }
  }

  if (!empty($title)) {

    // If the head title is desired to be different from the page title (h1),
    // pass this to preprocess (where head title must be set) by placing both
    // in a single string, separated by custom delimiter token. It is cleaned
    // out of the page title in preprocessing that block.
    // This is weird, but seems better than extracting the view info in
    // preprocess.
    // @see uwmed_uwmcms_search_preprocess_html()
    // @see uwmed_uwmcms_search_preprocess_block__page_title_block()
    $view_ex->setTitle($title . (!empty($head_title) ? ('[head_title]' . $head_title) : ''));

  }

}

/**
 * Preprocess the uwm_locations_geo_search view.
 *
 * - If searched by location coordinates, retrieve the distance away for each
 *   result row and store it on the node object for use in theming.
 */
function _uwmed_uwmcms_search_preprocess_views_view_uwm_locations_geo_search(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view_ex */
  $view_ex = $variables['view'];

  $result_row_key = 'entity:node/field_res_building:entity:field_coordinates_geofield__distance';

  /** @var \Drupal\views\ResultRow $result_row */
  foreach ($view_ex->result as $i => $result_row) {

    if (!empty($result_row->{$result_row_key})) {

      // Distance is computed/returned in Search API Location module in
      // kilometers.
      $result_distance_km = $result_row->{$result_row_key}[0];
      $result_distance_miles = $result_distance_km / 1.60935;

      $node = &$variables['rows'][0]['#rows'][$i]['#node'];

      // Store on the node object for display in the theme.
      // @see uwmbase/templates/node/node--res-clinic--card.html.twig
      $node->view_field__distance_away_miles = round($result_distance_miles, 1);

      // Set rendered node caching to vary by the 'latlng' query arg, because
      // the distance will change per the coordinates parameter. (The same form
      // input and query parameter are used for both use-my-location and
      // geocoded location name coordinates.)
      // @see _uwmed_uwmcms_search_views_pre_view_uwm_locations_geo_search()
      // @see _uwmed_uwmcms_search_alter_locations_search_form()
      $variables['rows'][0]['#rows'][$i]['#cache']['contexts'][] = 'url.query_args:latlng';

    }

  }

}
