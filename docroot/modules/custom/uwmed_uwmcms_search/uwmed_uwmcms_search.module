<?php

/**
 * @file
 * Hook implementations and basic functionality for uwmed_uwmcms_search.
 */

use Drupal\Core\Form\FormState;

/**
 * Implements hook_page_attachments_alter().
 *
 * Add libraries for search pages.
 */
function uwmed_uwmcms_search_page_attachments_alter(&$variables) {
  // Get the current path.
  $currentPath = \Drupal::service('path.current')->getPath();

  // Add the location search form library to the location search page.
  if (stripos($currentPath, '/search/locations') !== FALSE) {
    $variables['#attached']['library'][] = 'uwmed_uwmcms_search/location-search-form';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Customizes exposed forms for views.
 */
function uwmed_uwmcms_search_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  $storage = $form_state->getStorage();

  if (!isset($storage['view'])) {
    return;
  }

  $view = $storage['view'];

  switch ($view->id()) {
    case 'uwm_locations_geo_search':
      _uwmed_uwmcms_search_alter_locations_search_form($form, $form_state);
      break;

    case 'uwm_providers_search':
      _uwmed_uwmcms_search_alter_providers_search_form($form, $form_state);
      break;
  }
}

/**
 * Implements hook_views_pre_view().
 */
function uwmed_uwmcms_search_views_pre_view($view, $display_id, &$args) {
  switch ($view->id()) {
    case 'uwm_locations_geo_search':
      _uwmed_uwmcms_search_views_pre_view_uwm_locations_geo_search($view, $display_id, $args);
      break;
  }
}

/**
 * Implements hook_preprocess_views_view().
 */
function uwmed_uwmcms_search_preprocess_views_view(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view_ex */
  $view_ex = $variables['view'];

  switch ($view_ex->id()) {
    case 'uwm_locations_geo_search':
      _uwmed_uwmcms_search_preprocess_views_view_uwm_locations_geo_search($variables);
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uwmed_uwmcms_search_preprocess_facets_item_list(&$variables) {
  $facet = $variables['facet'];

  // Remove any duplicates from the UWM Search Within field.
  if ($facet->getFieldIdentifier() == 'uwmsearchwithin') {
    $titles = [];
    foreach ($variables['items'] as $key => $item) {
      if (isset($item['value']['#title']['#value'])) {
        $title = $item['value']['#title']['#value'];
        if (in_array(strtolower($title), $titles)) {
          unset($variables['items'][$key]);
        }
        else {
          $titles[] = $title;
        }
      }
    }
  }
}

/**
 * Implements hook_search_api_autocomplete_suggestions_alter().
 */
function uwmed_uwmcms_search_search_api_autocomplete_suggestions_alter(array &$suggestions, array $alter_params) {
  $search = $alter_params['search'];
  $suggester_ids = $search->getSuggesterIds();

  // Only alter "Live Results" suggestions.
  if (!in_array('live_results', $suggester_ids)) {
    return;
  }

  // For the Providers Autocomplete search index.
  if ($search->getIndexId() == 'uwm_providers_autocomplete_index') {
    foreach ($suggestions as $suggestion) {
      // Remove the URL.
      $suggestion->setUrl(NULL);

      // If user input exists.
      if (isset($alter_params['user_input'])) {
        $user_input = $alter_params['user_input'];
        $label = trim($suggestion->getLabel());

        // If the label was not set, use the render element.
        if (empty($label)) {
          $render = $suggestion->getRender();
          $label = \Drupal::service('renderer')->render($render);
          $label = trim(strip_tags($label));
        }

        $label = str_replace('  ', ' ', $label);

        // Get the position of the user input in the label.
        $position = stripos($label, $user_input);

        // Determine the new prefix, user input, and suffix.
        if ($position !== FALSE) {
          $user_input_length = strlen($user_input);
          $suggestion_prefix = substr($label, 0, $position);
          $new_user_input = substr($label, $position, $user_input_length);
          $suggestion_suffix = substr($label, $position + $user_input_length);
        }
        else {
          $suggestion_prefix = $label;
          $new_user_input = NULL;
          $suggestion_suffix = NULL;
        }

        // Update the suggestion.
        $suggestion->setLabel(NULL);
        $suggestion->setRender(NULL);
        $suggestion->setUserInput($new_user_input);
        $suggestion->setSuggestionPrefix($suggestion_prefix);
        $suggestion->setSuggestionSuffix($suggestion_suffix);
      }
    }
  }
}

/**
 * Implements hook_preprocess_search_api_autocomplete_suggestion().
 */
function uwmed_uwmcms_search_preprocess_search_api_autocomplete_suggestion(&$variables) {
  $suggestion = $variables['suggestion_prefix'];

  // If the user input did not match exactly, try to match and
  // highlight the individual parts.
  if (empty($variables['user_input'])) {
    $user_input = $_GET['q'];

    // Create a proxy to keep track of characters matched.
    $proxy = $suggestion;

    foreach (explode(' ', $user_input) as $part) {
      $position = stripos($suggestion, $part);
      if ($position !== FALSE) {
        $part_length = strlen($part);

        // Replace the matched characters with asterisks.
        $asterisks = str_repeat('*', $part_length);
        $proxy = substr_replace($proxy, $asterisks, $position, $part_length);
      }
    }

    // If no characters matched, bail.
    if (strpos($proxy, '*') === FALSE) {
      return;
    }

    // Assemble the tagged suggestion.
    $tagged_suggestion = '';
    $in_tag = FALSE;
    $proxy_length = strlen($proxy);

    for ($i = 0; $i <= $proxy_length; $i++) {
      $char = substr($proxy, $i, 1);
      if ($char == '*') {
        if ($in_tag) {
          $tagged_suggestion .= substr($suggestion, $i, 1);
        }
        else {
          $tagged_suggestion .= '<strong>' . substr($suggestion, $i, 1);
          $in_tag = TRUE;
        }
      }
      else {
        if ($in_tag) {
          $tagged_suggestion .= '</strong>' . substr($suggestion, $i, 1);
          $in_tag = FALSE;
        }
        else {
          $tagged_suggestion .= substr($suggestion, $i, 1);
        }
      }
    }

    // Add a closing tag, if necessary.
    if ($in_tag) {
      $tagged_suggestion .= '</strong>';
    }

    // Ensure spaces after tags are preserved.
    $tagged_suggestion = str_replace('</strong> ', ' </strong>', $tagged_suggestion);

    $variables['suggestion_prefix'] = [
      '#markup' => $tagged_suggestion,
      '#allowed_tags' => ['strong'],
    ];
  }
}

/**
 * Customize the locations search form.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormState $form_state
 *   The form state.
 */
function _uwmed_uwmcms_search_alter_locations_search_form(array &$form, FormState $form_state) {

  $form['use_my_location'] = [

    '#type' => 'container',
    '#attributes' => ['class' => ['use-my-location']],

    // Add a button to calculate user coordinates.
    'uml_button' => [
      '#prefix' => '<div class="use-my-location__prefix">' . t('or') . '</div>',
      '#markup' => '<button class="use-my-location__button btn btn-cta btn-cta-link" type="button">' . t('Use my location') . '</button>',
      '#allowed_tags' => ['button'],
    ],

    // Add a hidden field to hold calculated user coordinates.
    'latlng' => [
      '#type' => 'hidden',
      '#default_value' => \Drupal::request()->query->get('latlng'),
      '#attributes' => ['class' => ['use-my-location__coordinates']],
    ],

    // Add a container for a status message.
    'uml_status' => [
      '#markup' => '<div class="use-my-location__status"></div>',
      '#allowed_tags' => ['div'],
    ],

  ];

  $form['location_address_keywords'] = [

    '#type' => 'container',
    '#attributes' => ['class' => ['location-address-keywords']],

    'l' => [

      '#type' => 'textfield',
      '#size' => 30,
      '#default_value' => \Drupal::request()->query->get('l'),
      '#attributes' => [
        'placeholder' => 'Enter a zip code, neighborhood or city...',
        'autocomplete' => 'off',

      ],

      '#field_suffix' => '<a href="#" class="toggle-uml-dropdown" role="button" aria-haspopup="true" aria-expanded="false"></a>
<div class="dropdown"><div class="dropdown-menu"><a id="umlDropdownLink" href="#">Use my location</a></div></div>
<div class="status-message"></div>',
    ],

  ];

  if (isset($form['s'])) {

    $form['s']['#attributes']['class'][] = 'dm-form-item-collection';
    $form['s']['#attributes']['autocomplete'] = 'off';

    $form['s']['#weight'] = -10;
    $form['location_address_keywords']['#weight'] = -9;

  }

}

/**
 * Customize the providers search form.
 *
 * @param array $form
 *   The form.
 * @param \Drupal\Core\Form\FormState $form_state
 *   The form state.
 */
function _uwmed_uwmcms_search_alter_providers_search_form(array &$form, FormState $form_state) {
  // Use the autocomplete functionality from UWM Providers Autocomplete.
  $form['s']['#search_id'] = 'uwm_providers_autocomplete';
}

/**
 * Alter the uwm_locations_geo_search view in the pre_view phase.
 */
function _uwmed_uwmcms_search_views_pre_view_uwm_locations_geo_search($view, $display_id, $args) {
  $exposed_input = $view->getExposedInput();

  // If the Use My Location coordinates are available, use them for
  // the distance filter.
  if (!empty($exposed_input['latlng'])) {
    $distance_filter = $view->getHandler($display_id, 'filter', 'field_coordinates_geofield_latlong');
    if ($distance_filter) {
      $distance_filter['value']['value'] = $exposed_input['latlng'];
      $view->setHandler($display_id, 'filter', 'field_coordinates_geofield_latlong', $distance_filter);
    }
  }
}

/**
 * Preprocess the uwm_locations_geo_search view.
 *
 * - If searched by location coordinates, retrieve the distance away for each
 *   result row and store it on the node object for use in theming.
 */
function _uwmed_uwmcms_search_preprocess_views_view_uwm_locations_geo_search(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view_ex */
  $view_ex = $variables['view'];

  $result_row_key = 'entity:node/field_res_building:entity:field_coordinates_geofield__distance';

  /** @var \Drupal\views\ResultRow $result_row */
  foreach ($view_ex->result as $i => $result_row) {

    if (!empty($result_row->{$result_row_key})) {

      // Distance is computed/returned in Search API Location module in
      // kilometers.
      $result_distance_km = $result_row->{$result_row_key}[0];
      $result_distance_miles = $result_distance_km / 1.60935;

      $node = &$variables['rows'][0]['#rows'][$i]['#node'];

      // Store on the node object for display in the theme.
      // @see uwmbase/templates/node/node--res-clinic--card.html.twig
      $node->view_field__distance_away_miles = round($result_distance_miles, 1);

      // Set rendered node caching to vary by the 'latlng' query arg, because
      // the distance will change per the coordinates parameter. (The same form
      // input and query parameter are used for both use-my-location and
      // geocoded location name coordinates.)
      // @see _uwmed_uwmcms_search_views_pre_view_uwm_locations_geo_search()
      // @see _uwmed_uwmcms_search_alter_locations_search_form()
      $variables['rows'][0]['#rows'][$i]['#cache']['contexts'][] = 'url.query_args:latlng';

    }

  }

}
