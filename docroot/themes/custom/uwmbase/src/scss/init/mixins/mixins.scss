@mixin uw-skew($angle) {

  transform: skew($angle);
  transition-timing-function: ease-in;
  transition: 0.2s;
  // Chrome jagged line fix
  -webkit-backface-visibility: hidden;
  -webkit-transform-style: preserve-3d;
}

@mixin uwmed-bezier-transition-transition-timing() {
  transition-timing-function: cubic-bezier(0.215, 0.610, 0.355, 1.000);
}

@mixin uw-separator($angle: false) {

  @if $angle {
    @include uw-skew($angle);
  }

  height: 1em;
  width: 1em;
  margin: 0 1em;
  border-right: 1px solid transparent;
  display: inline-block;
}

/*
 * Container
 */
// Apply just the left/right container padding to align elements with the
// Bootstrap grid containers.
@mixin container-padding() {
  padding-left: $grid-gutter-width / 2;
  padding-right: $grid-gutter-width / 2;
}

@mixin container-padding-left() {
  padding-left: $grid-gutter-width / 2;
}

@mixin container-padding-right() {
  padding-right: $grid-gutter-width / 2;
}

/*
 * Links
 */
// Links - blue text w/ no underline; underline on hover
@mixin link-blue-hover-underline {
  color: theme-color('link-blue');
  text-decoration: none;

  &:hover, &:focus {
    text-decoration: underline;
  }
}

// Links - blue text w/ no underline; underline on hover
// This allows link to contain an icon so that the icon is clickable too,
// but only the text is underlined on hover.
// Link text must be its own descendant element of <a> with class .link__text
@mixin link-with-icon-blue-hover-underline {
  color: theme-color('link-blue');
  text-decoration: none;

  &:hover, &:focus {
    text-decoration: none;

    .link__text {
      text-decoration: underline;
    }
  }
}

/*
 * Display a link or button with icon(s) using flexbox.
 * It does not need to have the .btn-cta class.
 * The text must be a child element with class .btn__text (not directly in <a>).
 * - Left icon aligned to text (top)
 * - Right icon (arrow) vertically centered
 *
 * Example markup:
 *   <a class="btn btn-cta">
 *     <span class="btn__text">Read more</span>
 *     <span class="fa fa-angle-right"></span>
 *   </a>
 */
@mixin link-with-icons-aligned() {
  display: flex;
  align-items: center;

  .uwmed-icon {
    align-self: flex-start;
    position: relative;
    top: 2px;
    margin-right: 0.375rem; // 6px
  }

  .btn__text {
    flex-grow: 1;
  }

  .fa-angle-right {
    position: static;
    margin-left: 0.375rem; // 6px
  }
}

/*
 * CTA button styles
 *
 * @see base/_btn-cta.scss
 */
// Default class: .btn-cta
@mixin button-cta($color: "") {

  @if $color == "" {
    $color: $gray-500;
  }

  padding: 0 1em;
  text-transform: uppercase;
  text-decoration: none;

  background: white;
  transition: all 0.45s ease-in;
  height: 40px;
  line-height: 40px;
  color: theme-color('text');
  font-family: "Open Sans", Helvetica, Arial, sans-serif;
  font-size: 14px;

  margin-bottom: 1rem;

  border: 1px solid $color;

  &::before {
    background-position: left 0;
  }

  &:hover {
    cursor: pointer;
    color: color('white');

    .uwmed-icon {
      color: theme-color('secondary');
    }

    .fa-angle-right {
      color: color('white');
    }

    &::before {
      background: none;
    }
  }

  z-index: 1;

  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    transform: scaleX(0);
    transform-origin: 0 50%;
    transition-property: transform;
    transition-duration: 0.7s;
    transition-timing-function: ease-out;
    z-index: -1;
    background-color: $color;
  }

  &:hover {
    &::after {
      transform: scaleX(1);

      @media(hover: none) {
        transition-duration: 0s;
      }
    }
  }

}

@mixin button-cta-angled-edge($color: "") {

  @if $color == "" {
    $color: $gray-500;
  }

  @include button-cta($color);
  @include angled-edge('inside top', 'lower right', $color, 15, 15);

  &:hover {
    background: none;
  }
  &::before {
    background-position: left 0;
  }
  &::after {
    background-color: $color;
  }

}

// Default class: .btn-cta-solid
@mixin btn-cta-solid($background-color: color('blue'), $background-color-hover: $hover-blue) {
  display: inline-block;
  background-color: $background-color;
  color: color('white');
  // 2020-01-22: Confirmed this padding to be the desired default.
  // @see https://www.wrike.com/open.htm?id=446798910
  padding: 0.5rem 1rem; // 8px 16x
  border: 0 none; // Override default <button> styling
  font-size: 1rem; // 16px
  font-weight: 400;
  line-height: 1.5;
  text-align: center;
  text-decoration: none;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16);
  transition: 0.3s ease-in-out;
  cursor: pointer;

  &:focus {
    color: color('white');
    text-decoration: none;
  }

  &:hover, &:active {
    background-color: $background-color-hover;
    color: color('white');
    text-decoration: none;
  }
}

/*
 * Apply vertical border lines between grid items in a row (e.g. cards),
 * according to how many items are in each row.
 *
 * Apply this mixin to each item, e.g. `.card` or `.views-row`.
 * Pass $per-row as null if the number of items per row is unknown - in that
 * case, only the last item is set to not have the right border.
 */
@mixin bordered-grid-items($per-row: null, $color: theme-color('border-gray')) {

  border-right: 1px solid $color;

  // No border on the last item in each row.
  @if ($per-row) {
    &:nth-child(#{$per-row}n) {
      border-right: none;
    }
  }

  // No border on the last item overall.
  &:last-child {
    border-right: none;
  }

}
