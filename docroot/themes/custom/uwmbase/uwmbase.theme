<?php

/**
 * @file
 * Contains the theme's functions to manipulate Drupal's default markup.
 *
 * Complete documentation for this file is available online.
 * @see https://drupal.org/node/1728096
 */

use Drupal\uwmcs_extension\TwigExtension;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Cache\Cache;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Database\Database;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\image\Entity\ImageStyle;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Html;

/*
 * Include helper functions used elsewhere below. This allows separating out
 * some of the more lengthy processing or formatting work, so our
 * Drupal theme hooks are easier to read or multi-purpose.
 */
include_once './' . drupal_get_path('theme', 'uwmbase') . '/uwmbase.theme.inc.php';

/**
 * Get path (alias) of the current page.
 */
function _uwmbase_current_path_alias() {

  static $current_path_alias = NULL;

  if (empty($current_path_alias)) {
    $current_path = \Drupal::service('path.current')->getPath();
    $current_path_alias = \Drupal::service('path.alias_manager')
      ->getAliasByPath($current_path);
  }

  return $current_path_alias;

}

/**
 * Check if a given bundle is Medical Service or Medical Specialty.
 *
 * These node types have much in common and often need the same processing.
 *
 * @param string $bundle
 *   The bundle name to test.
 */
function _uwmbase_is_med_service_specialty_type($bundle) {

  return in_array($bundle, ['uwm_medical_service', 'uwm_medical_specialty']);

}

/**
 * Prepare the correct URL for a node's full page.
 *
 * This is primarily for clinic and provider full pages while they still live
 * on uwmed (cms), before porting to stevie.
 * - Checks for "cms." and replaces hostname with "www.uwmedicine.org"
 * - If node has `field_res_external_url`, use this value (clinics)
 *
 * Nothing is returned; the final absolute URL is stored in the custom property
 * $node->uwm_url for caching within the request.
 *
 * @param \Drupal\Node\NodeInterface $node
 *   The clinic node to prepare a URL for.
 */
function _uwmbase_node_prepare_uwm_url(NodeInterface $node) {

  // Check if already set.
  if (isset($node->uwm_url)) {
    return;
  }

  $url = Url::fromRoute('entity.node.canonical', ['node' => $node->id()], ['absolute' => TRUE])
    ->toString();

  // Remove possible internal URL on PROD:
  $host = parse_url($url, PHP_URL_HOST);
  if (stripos($host, 'cms.') !== FALSE) {
    $url = str_replace($host, 'www.uwmedicine.org', $url);
  }

  if ($node->hasField('field_res_external_url') && !$node->get('field_res_external_url')
    ->isEmpty()) {

    $external_url = $node->get('field_res_external_url')->value;
    if (stripos($external_url, '//') !== FALSE) {
      // Many clinic nodes have this field populated with the production
      // uwmedicine.org url. Ensure that (steve) uwmedicine.org nodes use their
      // relative path, and this field overrides for external sites only.
      if ($node->bundle() !== 'res_clinic' || stripos($external_url, 'uwmedicine.org') === FALSE) {
        $url = $external_url;
      }
    }
  }

  $node->uwm_url = $url;

}

/**
 * Parses our json string field into a PHP object.
 *
 * Process some specific data and save result in $node->uwm_json_packet_data.
 *
 * @param \Drupal\Node\NodeInterface $node
 *   A node which may have the field.
 */
function _uwmbase_node_parse_json_field(NodeInterface $node) {

  if ($node->hasField('field_uwm_json_packet')) {

    // Process data only once in a request.
    // if (!empty($node->uwm_json_packet_data)).
    $json_string = $node->field_uwm_json_packet->value;
    $json_data = json_decode($json_string, TRUE);

    $node->uwm_json_packet_data = $json_data;

  }

}

/**
 * Implements hook_theme_registry_alter().
 */
function uwmbase_theme_registry_alter(&$theme_registry) {

  // Alter our suggestion for the 'address_plain' theme hook provided by
  // Address module.
  // Res Clinic node addresses are pulled from an address field on referenced
  // Building taxonomy terms. Clinics may also have Floor and Room field values
  // that we want to inject into the address output.
  // @see uwmbase_theme_preprocess_node()
  // @see uwmbase_theme_preprocess_term()
  if (!empty($theme_registry['address_plain__buildings'])) {
    $theme_registry['address_plain__buildings']['variables']['floor'] = '';
    $theme_registry['address_plain__buildings']['variables']['room'] = '';
  }

}

/**
 * Implements hook_page_attachments_alter().
 */
function uwmbase_page_attachments_alter(&$variables) {

  $currentPath = \Drupal::service('path.current')->getPath();
  $isFrontPage = \Drupal::service('path.matcher')->isFrontPage();

  /***
   * Do any special work on tags in the html head section:
   */
  if (!empty($variables['#attached']['html_head'])) {
    foreach ($variables['#attached']['html_head'] as &$value) {

      // Replace double slashes in start of canonical_url.
      if ($value[1] === 'canonical_url' && isset($value[0]['#attributes']['href'])) {
        $value[0]['#attributes']['href'] = str_replace('.org//', '.org/',
            $value[0]['#attributes']['href']);
      }

      // Remove schema_metatag's JSON-LD meta on search and front pages.
      if ($isFrontPage || stripos($currentPath, '/search') !== FALSE) {

        unset($variables['#attached']['html_head']['schema_metatag']);

      }

    }
  }

  /***
   * Add libraries for search pages
   */
  if (stripos($currentPath, '/search') !== FALSE) {
    $variables['#attached']['library'][] = 'uwmbase/search';
  }
  if (stripos($currentPath, '/search/locations') !== FALSE) {
    $variables['#attached']['library'][] = 'uwmbase/search-locations';
  }
  if (stripos($currentPath, '/search/providers') !== FALSE) {
    $variables['#attached']['library'][] = 'uwmbase/search-providers';
  }

  // Add library for eCare page.
  if ($currentPath == '/node/20841') {
    $variables['#attached']['library'][] = 'uwmbase/ecare-page';
  }

  // Add library for Make an Appointment page.
  if ($currentPath == '/node/20836') {
    $variables['#attached']['library'][] = 'uwmbase/make-appt-page';
  }
}

/**
 * Implements hook_preprocess_html().
 */
function uwmbase_preprocess_html(&$variables, $hook) {

  $currentPath = \Drupal::service('path.current')->getPath();
  $variables['attributes']['class'][] = 'path' . str_replace('/', '-', $currentPath);

  $roles = \Drupal::currentUser()->getRoles();
  foreach ($roles as $role) {
    $variables['attributes']['class'][] = 'user-role-' . $role;
  }

  // Add a class to the eCare page.
  if ($currentPath == '/node/20841') {
    $variables['attributes']['class'][] = 'ecare-page';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function uwmbase_preprocess_page(&$variables, $hook) {

  $currentPath = \Drupal::service('path.current')->getPath();
  $variables['current_path'] = $currentPath;

  /** @var \Drupal\Node\NodeInterface $node */
  $node = !empty($variables['node']) ? $variables['node'] : NULL;

  if (stripos($currentPath, '/search/locations/map') !== FALSE) {
    $variables['page']['show_sidebar_second'] = TRUE;
  }

  if (!empty($node)) {

    // Check if a Medical Service or Medical Specialty node has a 'Hero Content
    // and Half-Wide Image' paragraph at the top. If so, render the page title
    // and breadcrumb in that template for layout reasons, and remove those
    // blocks from page regions.
    // @see uwmbase_preprocess_paragraph__half_wide_hero()
    $ms_hero = FALSE;
    $hero_field = 'field_uwm_sections';

    if (in_array($node->bundle(), ['uwm_medical_service', 'uwm_medical_specialty']) && $node->hasField($hero_field) && !$node->get($hero_field)->isEmpty()) {

      /** @var \Drupal\Core\Entity\EntityInterface[] $ref_entities */
      $ref_entities = $node->get($hero_field)->referencedEntities();
      $paragraph = $ref_entities[0];
      if ($paragraph->getEntityTypeId() === 'paragraph' && $paragraph->bundle() === 'half_wide_hero') {
        $ms_hero = TRUE;
      }

    }

    if ($ms_hero && !empty($variables['page']['breadcrumb']['uwmbase_breadcrumbs'])) {
      unset($variables['page']['breadcrumb']['uwmbase_breadcrumbs']);

      // There should be no other blocks in the 'breadcrumb' region. Unset the
      // region render array if so, to avoid empty wrapper markup.
      if (count(Element::children($variables['page']['breadcrumb'])) === 0) {
        unset($variables['page']['breadcrumb']);
      }
    }

    // Remove the page title block on certain types of pages:
    // - On Clinic node pages, the title is printed in the node template instead
    //   for layout reasons.
    // - On Homepage node, the main header text is within the hero.
    // - On Medical Services nodes, there may be a hero paragraph that prints
    //   the title.
    if (!empty($variables['page']['title']['uwmbase_page_title'])) {
      if ($node->bundle() === 'res_clinic' || $node->bundle() === 'uwm_homepage' || $ms_hero) {
        unset($variables['page']['title']['uwmbase_page_title']);

        // There should be no other blocks in the 'title' region. Unset the
        // region render array if so, to avoid empty wrapper markup.
        if (count(Element::children($variables['page']['title'])) === 0) {
          unset($variables['page']['title']);
        }
      }
    }

  }

}

/**
 * Implements hook_preprocess_region().
 */
function uwmbase_preprocess_region(&$variables, $hook) {

  $variables['current_path'] = \Drupal::service('path.current')->getPath();

}

/**
 * Implements hook_preprocess_block().
 */
function uwmbase_preprocess_block(&$variables, $hook) {
}

/**
 * Implements hook_preprocess_node().
 */
function uwmbase_preprocess_node(&$variables, $hook) {

  $currentPath = \Drupal::service('path.current')->getPath();
  $currentPath = \Drupal::service('path.alias_manager')
    ->getAliasByPath($currentPath);

  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];
  $nodeType = $node->getType();

  /* Inspect the request node to check if a node is being rendered via another
   * node's template. For example, as an entity reference item.
   */
  $displayContext = NULL;

  $requestNode = \Drupal::request()->attributes->get('node');
  if ($requestNode) {
    if ($requestNode->id() === $node->id()) {
      $displayContext = 'self';
    }
    else {
      $displayContext = $requestNode->bundle();
    }
  }

  $variables['display_context'] = $displayContext;

  // Clinic and provider cards have some elements conditionally displayed based
  // on the context in which they're rendered. Ensure cards are not cached
  // across different usages.
  if (in_array($variables['view_mode'], [
    'card',
    'card_brief',
    'provider_card',
    'location_card',
  ])) {
    $variables['#cache']['contexts'][] = 'url.path';
  }

  // Restore simple node container classes:
  // @TODO: Where did these go?
  $variables['attributes'] = $variables['attributes'] ?? [];
  $classes = $variables['attributes']['class'] ?? [];
  $variables['attributes']['class'] = array_merge($classes,
    [
      'node',
      'node-' . $nodeType,
      'view-mode-' . $variables['elements']['#view_mode'],

    ]);

  // Override the url variable for this node to ensure correct prod domain
  // and use external URL if provided in field.
  _uwmbase_node_prepare_uwm_url($node);
  $variables['url'] = $node->uwm_url;

  // Check if the URL is external to uwmedicine.org.
  $variables['url_not_uwmedicine_org'] = (strpos($node->uwm_url, 'uwmedicine.org') === FALSE);

  // For entity reference fields displaying as linked entity label, update to
  // use prepared node URL.
  foreach (Element::children($variables['content']) as $field) {
    if (!empty($variables['content'][$field][0]['#type'])
        && $variables['content'][$field][0]['#type'] === 'link'
        && !empty($variables['content'][$field][0]['#options']['entity_type'])
        && $variables['content'][$field][0]['#options']['entity_type'] === 'node') {

      foreach (Element::children($variables['content'][$field]) as $delta) {

        $item = &$variables['content'][$field][$delta];

        $node_ref = $item['#options']['entity'];
        _uwmbase_node_prepare_uwm_url($node_ref);

        // The prepared URL string is always absolute (because it may link to
        // a different domain). Regenerate the URL object for link render
        // array, using fromUri() which handles external URLs.
        $item['#url'] = Url::fromUri($node_ref->uwm_url);

      }

    }
  }

  // Parse custom JSON data field.
  _uwmbase_node_parse_json_field($node);

  // Pass specific variables from JSON data to the template.
  if (!empty($node->uwm_json_packet_data) && $node->bundle() === 'res_clinic') {
    $variables['hours'] = _uwmbase_get_clinic_hours_array($node->uwm_json_packet_data);

  }

  if (stripos($currentPath, '/provider-resource') !== FALSE) {
    $specialties = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadTree('uwm_provider_resource_specialtie');
    $data = [];
    foreach ($specialties as $s) {
      $data[$s->tid] = [
        'name' => $s->name,
        'description' => $s->description__value,
      ];
    }
    $variables['#attached']['drupalSettings']['specialtyDescriptions'] = $data;
  }

  if ($variables['elements']['#view_mode'] == 'search_result') {
    $variables['label'] = NULL;
  }

  if ($node->bundle() === 'res_clinic') {

    // For a Res Clinic rendering its referenced Building term as address only,
    // pass the node Floor and Room Number fields to be included in address.
    if (!empty($variables['content']['field_res_building'][0]['#view_mode']) && $variables['content']['field_res_building'][0]['#view_mode'] === 'building_address') {

      // Pass node's field render arrays down to Building term render array
      // (which is not yet expanded to its own fields).
      // @see uwmbase_preprocess_taxonomy_term()
      if (!empty($variables['content']['field_res_floor'][0])) {
        $variables['content']['field_res_building'][0]['#res_clinic']['floor'] = $variables['content']['field_res_floor'][0];
        unset($variables['content']['field_res_floor']);
      }

      if (!empty($variables['content']['field_res_room_number'][0])) {
        $variables['content']['field_res_building'][0]['#res_clinic']['room'] = $variables['content']['field_res_room_number'][0];
        unset($variables['content']['field_res_room_number']);
      }

      // Do not cache the rendered Building taxonomy term. It's only the
      // address field, which needs per-node caching in any case that has a
      // different floor or room. It can just be part of the rendered node
      // cache item.
      if (!empty($variables['content']['field_res_building'][0]['#cache'])) {
        unset($variables['content']['field_res_building'][0]['#cache']);
      }

    }

    // When displaying Res Clinic cards, ensure we only render one image.
    if ($variables['view_mode'] === 'card' && !empty($variables['content']['field_res_image'][1])) {
      $delta = 1;
      while (!empty($variables['content']['field_res_image'][$delta])) {
        unset($variables['content']['field_res_image'][$delta]);
        $delta++;
      }
    }

    // Preprocessing for full page.
    if ($variables['view_mode'] === 'full') {
      // Retrieve content blocks that hold manageable text.
      // These blocks are created on prod so we know the IDs.
      $block_storage = \Drupal::entityTypeManager()
        ->getStorage('block_content');
      $block_builder = \Drupal::entityTypeManager()
        ->getViewBuilder('block_content');

      $block_note_urgent_close = $block_storage->load(6);
      if ($block_note_urgent_close) {
        $variables['block_note_urgent_close'] = $block_builder->view($block_note_urgent_close);
      }
      $block_note_emergency = $block_storage->load(11);
      if ($block_note_emergency) {
        $variables['block_note_emergency'] = $block_builder->view($block_note_emergency);
      }

      // Render the building taxonomy term in "Building: directions only" view
      // mode for use on the 'directions/parking' tab.
      $term_storage = \Drupal::EntityTypeManager()
        ->getStorage('taxonomy_term');
      $term_builder = \Drupal::EntityTypeManager()
        ->getViewBuilder('taxonomy_term');

      $variables['building_directions'] = NULL;
      if ($node->hasField('field_res_building') && !$node->get('field_res_building')
        ->isEmpty()) {

        $building = $term_storage->load($node->field_res_building->entity->id());
        $variables['building_directions'] = $term_builder->view($building, 'building_directions');
      }
    }

    // Retrieve whether this is a hospital from boolean field.
    $variables['is_hospital'] = FALSE;
    if ($node->hasField('field_res_is_hospital') && !$node->get('field_res_is_hospital')->isEmpty()) {

      $variables['is_hospital'] = (boolean) $node->get('field_res_is_hospital')->first()->getValue()['value'];
    }

  }
  elseif ($node->bundle() === 'res_provider') {
    // Pass information about clinics associated with a provider.
    $clinic_entities = $node->field_res_clinics;

    // Set the call center phone number as the default contact phone number.
    // We'll keep this number set as the contact phone number if the provider
    // has 0 clinics or if this provider has multiple clinics and all are
    // serviced by call center.
    $contact_phone_number = '2065205000';

    /*****
     * Set the make an appointment URI for providers.
     */
    foreach ($clinic_entities as $k => $clinic) {
      // If a provider's primary (first) clinic is Hall Health Center, use their
      // appointment bookings URL.
      $clinicUri = $clinic->entity->field_res_external_url->value;
      if ($k === 0 && stripos($clinicUri, 'hall-health-center') !== FALSE) {
        $variables['provider_appointments_uri'] = 'http://depts.washington.edu/hhpccweb/';
      }
    }
    if (!isset($variables['provider_appointments_uri'])) {
      $variables['provider_appointments_uri'] = '/patient-care/making-an-appointment';

      // If the provider uses open scheduling and has an Epic ID (SER),
      // add the ID to the appointment URI.
      if (isset($node->field_res_is_open_scheduling) && $node->field_res_is_open_scheduling->value == '1'
      && isset($node->field_res_ser_id) && $node->field_res_ser_id->value) {
        $variables['provider_appointments_uri'] .= '?ser=' . $node->field_res_ser_id->value;
      }
    }

    if (count($clinic_entities) === 1) {
      // If there is one and only one clinic, set the contact phone number to
      // that clinic's phone number.
      $contact_phone_number = $clinic_entities[0]->entity->field_res_phone_number->get(0)->value;
    }
    elseif (count($clinic_entities) > 1) {
      // If there are multiple clinics, determine whether they are all serviced
      // by the call center.
      $all_serviced_by_call_center = TRUE;
      foreach ($clinic_entities as $clinic) {
        // If there are multiple clinics and all clinics are serviced by the
        // call center, don't change the contact phone number.
        if ($clinic->entity !== NULL && $clinic->entity->field_res_iscallcenterserviced->value === "1" && $all_serviced_by_call_center === TRUE) {
          $all_serviced_by_call_center = TRUE;
        }
        // If there are multiple clinics and not all clinics are serviced by the
        // call center, set the contact phone number to null so we can
        // display the 'view contact information' button.
        else {
          $all_serviced_by_call_center = FALSE;
          $contact_phone_number = NULL;
        }
      }
    }
    $variables['contact_phone_number'] = $contact_phone_number;

    // Pass information about medical services associated with a provider.
    $medical_services = $node->field_res_medical_services;
    $areas_of_expertise = $node->field_res_expertises;
    if (count($medical_services) > 0 && count($areas_of_expertise) > 0) {
      // Determine whether this provider is an Urgent Care provider by checking
      // if their only Medical Service is Urgent Care and their only Area of
      // Expertise is Urgent Care.
      $is_urgent_care_provider = TRUE;

      // Check the provider's medical services.
      foreach ($medical_services as $medical_service) {
        if ($medical_service->entity !== NULL && strtolower($medical_service->entity->label()) === "urgent care" && $is_urgent_care_provider === TRUE) {
          $is_urgent_care_provider = TRUE;
        }
        else {
          $is_urgent_care_provider = FALSE;
        }
      }

      // If the provider only has the Urgent Care medical service, check their
      // areas of expertise.
      if ($is_urgent_care_provider === TRUE) {
        foreach ($areas_of_expertise as $expertise) {
          if ($expertise->entity !== NULL && strtolower($expertise->entity->label()) === "urgent care" && $is_urgent_care_provider === TRUE) {
            $is_urgent_care_provider = TRUE;
          }
          else {
            $is_urgent_care_provider = FALSE;
          }
        }
      }
      $variables['is_urgent_care_provider'] = $is_urgent_care_provider;
    }

  }
  elseif ($node->bundle() === 'uwm_homepage') {

    $variables['#attached']['library'][] = 'uwmbase/homepage';

  }

}

/**
 * Implements hook_preprocess_node__uwm_homepage().
 */
function uwmbase_preprocess_node__uwm_homepage(&$variables) {

  // For temporary markup field:
  // Embed svg icons as markup. They must be in the markup (rather than as a
  // css background image) to enable setting color via css.
  // Placeholder markup example:
  // <span class="uwm-icon-svg-replace">icon_media.svg</span>.
  if (!empty($variables['content']['field_uwm_homepage_markup'][0])) {
    $markup = $variables['content']['field_uwm_homepage_markup'][0]['#text'];

    preg_match_all('/<span class="uwm-icon-svg-replace">([^<]+\.svg)<\/span>/', $markup, $matches, PREG_SET_ORDER);

    $svgs_replace = [];
    $icons_dir = './themes/custom/uwmbase/dist/assets/uwm-icons/';

    foreach ($matches as $match) {

      $placeholder = $match[0];
      $filename = $match[1];

      if (!array_key_exists($placeholder, $svgs_replace)) {

        $svg = file_get_contents($icons_dir . $filename);

        // Replace if file is successfully read.
        // (Otherwise, CSS hides the placeholder element.)
        if (!empty($svg)) {
          $svgs_replace[$placeholder] = $svg;
        }
      }

    }

    $markup = str_replace(array_keys($svgs_replace), array_values($svgs_replace), $markup);

    $variables['content']['field_uwm_homepage_markup'][0]['#text'] = $markup;
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for 'taxonomy_term'.
 *
 * Add view mode suggestions.
 */
function uwmbase_theme_suggestions_taxonomy_term_alter(array &$suggestions, array $variables) {

  /** @var \Drupal\taxonomy\TermInterface $term */
  $term = $variables['elements']['#taxonomy_term'];
  $bundle = $term->bundle();

  $view_mode = $variables['elements']['#view_mode'];

  // Build a new array, to control precedence.
  $new_suggestions = [];

  foreach ($suggestions as $i => $suggestion) {

    // Add view mode as the first.
    if ($i === 0) {
      $new_suggestions[] = 'taxonomy_term__' . $view_mode;
    }

    // Add existing suggestion.
    $new_suggestions[] = $suggestions[$i];

    // After bundle, add bundle + view mode.
    if ($suggestions[$i] === 'taxonomy_term__' . $bundle) {
      $new_suggestions[] = 'taxonomy_term__' . $bundle . '__' . $view_mode;
    }

  }

  $suggestions = $new_suggestions;

}

/**
 * Implements hook_preprocess_taxonomy_term().
 */
function uwmbase_preprocess_taxonomy_term(&$variables) {

  $elements = $variables['elements'];

  // The "Building: Address only" view mode renders Building terms as only their
  // address field. Here we pass additional values from the parent Res Clinic
  // node to be used in a customized address template.
  // @see taxonomy-term--buildings--building-address.html.twig
  if ($variables['view_mode'] === 'building_address' && !empty($variables['content']['field_res_address'][0])) {

    // Set custom theme hook suggestion.
    // @see templates/misc/address-plain--buildings.html.twig
    $variables['content']['field_res_address'][0]['#theme'] = 'address_plain__buildings';

    // Pass the received Floor and Room field render arrays down to the
    // Building's Address field. The field should use the "Plain" formatter,
    // thus the'address_plain' base hook. We've altered our suggestion to accept
    // these additional variables.
    // This field is limited to 1 value, so update the first (only) item.
    // @see uwmbase_theme_registry_alter()
    if (!empty($elements['#res_clinic'])) {

      if (!empty($elements['#res_clinic']['floor'])) {
        $variables['content']['field_res_address'][0]['#floor'] = $elements['#res_clinic']['floor'];
      }

      if (!empty($elements['#res_clinic']['room'])) {
        $variables['content']['field_res_address'][0]['#room'] = $elements['#res_clinic']['room'];
      }

    }

  }

}

/**
 * Implements hook_preprocess_comment().
 */
function uwmbase_preprocess_comment(&$variables, $hook) {
}

/**
 * Implements template_preprocess_container().
 */
function uwmbase_preprocess_container(&$variables) {
  $element = $variables['element'];
}

/**
 * Implements template_preprocess_field().
 */
function uwmbase_preprocess_field(&$variables, $hook) {
  $element = $variables['element'];
  $element['#label_display'] = 'hidden';

  // Pass the entity's current view mode to templates.
  // (Note that view mode is not used for theme hook suggestions here.)
  $variables['view_mode'] = $element['#view_mode'];

  // Pass node URL to field templates.
  if ($element['#entity_type'] === 'node' && !empty($element['#object'])) {
    _uwmbase_node_prepare_uwm_url($element['#object']);
    $variables['node_url'] = $element['#object']->uwm_url;
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function uwmbase_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  // If on an individual node page, add the node type to theme suggestions.
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $first_suggestion = array_shift($suggestions);
    array_unshift($suggestions, 'page__node__' . $node->bundle());
    if ($first_suggestion) {
      array_unshift($suggestions, $first_suggestion);
    }
    if (in_array('page__node__edit', $suggestions)) {
      $suggestions[] = 'page__node__edit__' . $node->bundle();
    }
  }
  elseif ($media = \Drupal::routeMatch()->getParameter('media')) {
    $first_suggestion = array_shift($suggestions);
    array_unshift($suggestions, 'page__media__' . $media->bundle());
    if ($first_suggestion) {
      array_unshift($suggestions, $first_suggestion);
    }
    if (in_array('page__media__edit', $suggestions)) {
      $suggestions[] = 'page__media__edit__' . $media->bundle();
    }
  }

  /*
   * Provide a node suggestion based on the  alias. This allows a special
   * file for a node but, based on the path which tends to be more fixed
   * than the node id.
   */
  $current_path = \Drupal::service('path.current')->getPath();
  $result = \Drupal::service('path.alias_manager')
    ->getAliasByPath($current_path);

  $path_alias = trim($result, '/');
  $path_alias = str_replace(['/', '-'], '_', $path_alias);

  $suggestions[] = 'page__path_alias__' . $path_alias;

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function uwmbase_theme_suggestions_node_alter(array &$suggestions, array $variables) {

  /*
   * Several node-types have their own template but, no view-mode template. This
   * adds any generic view-mode template above the node-type template.
   */
  if (!empty($variables['elements']['#node']) && method_exists($variables['elements']['#node'], 'getType')) {

    $viewModeSuggestion = 'node__' . $variables['elements']['#view_mode'];
    $nodeTypeSuggestion = 'node__' . $variables['elements']['#node']->getType();

    $vm = array_search($viewModeSuggestion, $suggestions);
    $nt = array_search($nodeTypeSuggestion, $suggestions);

    if ($vm !== FALSE && $nt !== FALSE) {
      $suggestions[$nt] = $viewModeSuggestion;
      $suggestions[$vm] = $nodeTypeSuggestion;
    }
  }

}

/**
 * Implements hook_preprocess_paragraph().
 */
function uwmbase_preprocess_paragraph(&$variables) {

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];

  $parent = $paragraph->getParentEntity();

  // For any paragraph type, check if a parent Grid paragraph specified to
  // style all children as cards.
  // @see uwmbase_preprocess_paragraph__uwm_grid()
  $variables['style_as_card'] = (isset($variables['elements']['#style_as_card']) && $variables['elements']['#style_as_card'] === TRUE);

  // Add the Bootstrap 'card' css class.
  if ($variables['style_as_card']) {
    $variables['attributes']['class'][] = 'card';
  }

  // For outermost container paragraph types, check for fields that provide
  // styling metadata for the template, and set any default values.
  $variables['style_values'] = [];

  if (in_array($paragraph->bundle(), [
    'uwm_section',
    'uwm_sections_medical_services',
    'uwm_featured_story',
  ])) {

    // Check if Featured Story paragraph references a Featured Story
    // block_content entity, to use its fields instead.
    $entity = $paragraph;
    if ($paragraph->bundle() === 'uwm_featured_story' && !$paragraph->get('field_uwm_block')->isEmpty()) {
      $entity = $paragraph->get('field_uwm_block')->referencedEntities()[0];
    }

    foreach ([
      'field_uwm_accent_color',
      'field_uwm_bottom_border_options',
      'field_uwm_background_color',
    ] as $field_name) {

      if ($entity->hasField($field_name)) {

        // Retrieve the field value, or the referenced entity from it.
        $item = NULL;
        $ref_entity = NULL;

        if (!$entity->get($field_name)->isEmpty()) {
          $items = $entity->get($field_name);

          if ($items->getFieldDefinition()->getType() === 'entity_reference') {
            $ref_entity = $items->referencedEntities()[0];
          }
          else {
            $item = $items->first();
          }
        }

        switch ($field_name) {
          case 'field_uwm_accent_color':

            if (!empty($ref_entity)) {
              $variables['style_values'][$field_name] = $ref_entity->label();
            }
            else {
              // For Medical Service/Specialty pages only, default to 'orange'.
              if ($parent->getEntityTypeId() === 'node' && _uwmbase_is_med_service_specialty_type($parent->bundle())) {
                $variables['style_values'][$field_name] = 'orange';
              }
            }

            break;

          case 'field_uwm_bottom_border_options':

            // Default to 'angled' everywhere.
            $variables['style_values'][$field_name] = (!empty($ref_entity) ? $ref_entity->label() : 'angled');

            break;

        }

      }

    }
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function uwmbase_preprocess_paragraph__uwm_image_hero(&$variables) {
  $paragraph = $variables['paragraph'];

  $parent = $paragraph->getParentEntity();

  if ($parent->hasField('field_uwm_parent_page')) {
    $entity_ref = $parent->get('field_uwm_parent_page');
    // If our field has data.
    if ($entity_ref->count() > 0) {
      $entity = $entity_ref->entity;
      $variables['parent_page_title'] = $entity->get('title')->value;
      $variables['parent_page_url'] = $entity->toUrl()->toString();
    }
  }

}

/**
 * Implements hook_preprocess_paragraph__half_wide_hero().
 */
function uwmbase_preprocess_paragraph__half_wide_hero(&$variables) {

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];

  $variables['page_title'] = NULL;
  $variables['block_breadcrumb'] = NULL;

  $parent = $paragraph->getParentEntity();
  if (!empty($parent) && $parent->getEntityTypeId() === 'node') {

    // Get parent node title, to render page title in paragraph template for
    // layout.
    $variables['page_title'] = $parent->label();

    // On Medical Service or Medical Specialty node, render the breadcrumb block
    // in paragraph template for layout.
    if (in_array($parent->bundle(), ['uwm_medical_service', 'uwm_medical_specialty'])) {

      $block_storage = \Drupal::entityTypeManager()->getStorage('block');
      $block_builder = \Drupal::entityTypeManager()->getViewBuilder('block');

      $block_breadcrumb = $block_storage->load('uwmbase_breadcrumbs');
      if (!empty($block_breadcrumb)) {
        $variables['block_breadcrumb'] = $block_builder->view($block_breadcrumb);
      }

    }

  }

}

/**
 * Implements hook_preprocess_HOOK().
 *
 * NOTE: this preprocesses both Section and Sections for Medical Services
 * paragraphs.
 *
 * @see uwmbase_preprocess_paragraph__uwm_sections_medical_services()
 */
function uwmbase_preprocess_paragraph__uwm_section(&$variables) {

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];

  /** @var \Drupal\Core\Entity\EntityInterface[] $children */
  $children = (!$paragraph->get('field_uwm_component')->isEmpty() ? $paragraph->get('field_uwm_component')->referencedEntities() : NULL);

  // Retrieve custom CSS classes from field.
  $variables['custom_css_classes'] = '';
  if ($paragraph->hasField('field_uwm_css_class') && !$paragraph->get('field_uwm_css_class')->isEmpty()) {
    $variables['custom_css_classes'] = trim($paragraph->get('field_uwm_css_class')->first()->getValue()['value']);
  }

  // Set ID for an anchor, so that a link elsewhere on the page may jump to
  // this section.
  // (Might be nice to allow make this customizable with a field.)
  $variables['section_anchor_id'] = NULL;

  // Med Service/Specialty pages: if this section is featured clinics, provide
  // anchor to jump from hero CTA to featured clinics.
  if (!empty($children) && $children[0]->bundle() === 'uwm_featured_clinics') {
    $variables['section_anchor_id'] = Html::getUniqueId('featured-clinics');
  }

  // Attach library for animated scroll to anchor.
  if (!empty($variables['section_anchor_id'])) {
    $variables['#attached']['library'][] = 'uwmbase/anchor-scroll';
  }

  // Retrieve the background image URL.
  // This should be configured to display with the "URL to image" formatter.
  // Use the rendered field (instead of extracting the URL from field data)
  // because:
  // - using a render array includes cache metadata,
  // - it's easy to configure to use an image style.
  $variables['background_image_url'] = NULL;

  // Case 1: image (file) field, currently on Section paragraph type.
  if (!empty($variables['content']['field_uwm_image'][0])) {
    $fid = $paragraph->get('field_uwm_image')->getValue()[0]['target_id'];
    $file = File::load($fid);
    $uri = $file->getFileUri();

    // $xl = ImageStyle::load('background_watermark_xl')->buildUrl($uri);.
    // $variables['background_image_xl_url'] = $xl;.
    $style_url = ImageStyle::load('background_watermark_m')->buildUrl($uri);
    $variables['background_image_url'] = $style_url;
  }
  // Case 2: media reference field, currently on Sections for Medical Services
  // paragraph type.
  elseif (!empty($variables['content']['field_uwm_media'][0])) {
    // TODO: complete if cases arises for Medical Service or Specialty nodes.
  }

}

/**
 * Implements hook_preprocess_paragraph__uwm_sections_medical_services().
 *
 * 2019-07-17 NOTE:
 * This paragraph type is used as for sections (parents of most components) on
 * Medical Service and Medical Specialty node types. It would be desirable to
 * consolidate and use the generic Section paragraph type everywhere. However,
 * at the time of porting these pages to stevie, there was already much content
 * populated in children of these Sections for Medical Services paragraphs. Thus
 * we kept it, but aim to keep it in parity with generic Section paragraph in
 * the theme code. Hence, it simply runs the same preprocessing as for Section
 * paragraphs.
 */
function uwmbase_preprocess_paragraph__uwm_sections_medical_services(&$variables) {
  uwmbase_preprocess_paragraph__uwm_section($variables);
}

/**
 * Implements hook_preprocess_paragraph__uwm_featured_story().
 */
function uwmbase_preprocess_paragraph__uwm_featured_story(&$variables) {

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];

  // If this paragraph references a Featured Story block_content entity (i.e.
  // a reusable component), pull its field render arrays to override the
  // `content` variable here, so we can use the paragraph template to render
  // either case consistently.
  // This avoids nested/multiple templates. Also, by default, the block_content
  // entity does *not* have its own theme hook/template to override - because
  // core assumes it will always be rendered within a block (config entity).
  $variables['is_block_content'] = FALSE;

  if (!empty($variables['content']['field_uwm_block'][0])) {

    $block_content_ra = $variables['content']['field_uwm_block'][0];

    foreach (array_keys($paragraph->getFieldDefinitions()) as $field_name) {
      if (!empty($block_content_ra[$field_name])) {
        $variables['content'][$field_name] = $block_content_ra[$field_name];
      }
    }

    // The block_content type has a media reference field in place of the
    // image file field. Pull that in too.
    if (!empty($block_content_ra['field_uwm_media_image'])) {
      $variables['content']['field_uwm_media_image'] = $block_content_ra['field_uwm_media_image'];
    }

    // Fully replace the paragraph's cache metadata with the block_content's.
    // In this case, the paragraph is just a wrapper for the block_content,
    // so we don't need to cache on a per-paragraph basis.
    $variables['#cache'] = $block_content_ra['#cache'];

    // Finally, no need to keep the block_content reference field anymore.
    unset($variables['content']['field_uwm_block']);

    // Set a flag for the template in case anything needs to vary based on
    // this being the block_content case.
    $variables['is_block_content'] = TRUE;

  }

  // Check for a CTA link in the Featured Story's content that will open the
  // associated modal. This is indicated by the content author by setting the
  // link's URL as '#modal'.
  if (!empty($variables['content']['field_uwm_modal'][0])) {
    if (!empty($variables['content']['field_uwm_card_content'][0])) {
      foreach (Element::children($variables['content']['field_uwm_card_content']) as $delta) {

        // Get the referenced child paragraph.
        $child = &$variables['content']['field_uwm_card_content'][$delta]['#paragraph'];
        if ($child->bundle() === 'uwm_cta_link' && !$child->get('field_uwm_link')->isEmpty()) {

          $link_item = $child->get('field_uwm_link')->first();
          $link_item_value = $link_item->getValue();

          if ($link_item_value['uri'] === 'internal:#modal') {

            // Update the uri to reference the ID of the modal paragraph.
            // This will be used later in rendering.
            $link_item->setValue(array_merge($link_item_value, [
              'uri' => 'internal:#modal-' . $variables['content']['field_uwm_modal'][0]['#paragraph']->id(),
            ]));

            // Pass a variable to the modal paragraph indicating that a
            // CTA link will trigger the modal.
            // @see uwmbase_preprocess_paragraph__uwm_modal()
            $variables['content']['field_uwm_modal'][0]['#cta_to_modal'] = TRUE;

          }

        }

      }
    }
  }

}

/**
 * Implements hook_preprocess_paragraph__uwm_modal().
 */
function uwmbase_preprocess_paragraph__uwm_modal(&$variables) {

  // Check if parent Featured Story has a CTA link to open the modal, and pass
  // that variable to template to skip rendering the 'play' button.
  $variables['cta_to_modal'] = (isset($variables['elements']['#cta_to_modal']) && $variables['elements']['#cta_to_modal']);

}

/**
 * Implements hook_preprocess_paragraph__uwm_grid().
 */
function uwmbase_preprocess_paragraph__uwm_grid(&$variables) {

  /** @var \Drupal\paragraphs\ParagraphInterface $grid_paragraph */
  $grid_paragraph = $variables['paragraph'];

  // If any of the child paragraphs are cards, style all as cards.
  $variables['style_as_cards'] = FALSE;

  if (!empty($variables['content']['field_uwm_columns']) && !$grid_paragraph->get('field_uwm_columns')->isEmpty()) {

    /** @var \Drupal\paragraphs\ParagraphInterface $col_paragraph */
    foreach ($grid_paragraph->get('field_uwm_columns')->referencedEntities() as $col_paragraph) {

      // Check for Card paragraph type.
      if ($col_paragraph->bundle() === 'uwm_card') {
        $variables['style_as_cards'] = TRUE;
        break;
      }

      // Check for Reusable Content paragraph type, wrapping a Card block type.
      if ($col_paragraph->bundle() === 'uwm_block' && !$col_paragraph->get('field_uwm_block')->isEmpty()) {

        $block_id = $col_paragraph->get('field_uwm_block')
          ->first()
          ->getValue()['target_id'];
        $block_content = \Drupal::entityTypeManager()
          ->getStorage('block_content')
          ->load($block_id);

        if (!empty($block_content) && $block_content->bundle() === 'uwm_card') {
          $variables['style_as_cards'] = TRUE;
          break;
        }

      }

    }

    // Pass a custom property into child paragraphs' render arrays.
    // @see uwmbase_preprocess_paragraph()
    if ($variables['style_as_cards']) {

      foreach (Element::children($variables['content']['field_uwm_columns']) as $delta) {
        $variables['content']['field_uwm_columns'][$delta]['#style_as_card'] = TRUE;
      }

    }
  }

  // Define whether grid columns should be separated by dividers.
  $variables['use_column_dividers'] = 0;
  if ($grid_paragraph->hasField('field_uwm_column_dividers')) {
    $column_dividers_field = $grid_paragraph->get('field_uwm_column_dividers');
    if (isset($column_dividers_field) && $column_dividers_field->first()) {
      $column_dividers_value = $column_dividers_field->first()->getValue();
      if (isset($column_dividers_value['value'])) {
        $variables['use_column_dividers'] = $column_dividers_value['value'];
      }
    }
  }

  // Determine whether to add a Bootstrap grid container wrapper.
  // The Section paragraph types provide the container in their templates, so
  // this is a catch for any future case in which a Grid exists outside of
  // a Section.
  $variables['add_container'] = FALSE;
  $parent = $grid_paragraph->getParentEntity();
  if (!empty($parent) && !in_array($parent->bundle(), ['uwm_section', 'uwm_sections_medical_services'])) {
    $variables['add_container'] = TRUE;
  }

}

/**
 * Implements hook_preprocess_HOOK().
 */
function uwmbase_preprocess_field__paragraph__field_uwm_section_heading(&$variables) {
  // Define a variable that indicates if the heading should be accented.
  // @see field--paragraph--field-uwm-section-heading--uwm-section.html.twig
  $variables['accented_heading'] = 0;

  if (isset($variables['element']['#object'])) {
    /* \Drupal\paragraphs\ParagraphInterface $paragraph */
    $paragraph = $variables['element']['#object'];
    if ($paragraph->hasField('field_uwm_accented_heading')) {
      $accented_heading_field = $paragraph->get('field_uwm_accented_heading');

      if ($accented_heading_field->value) {
        $variables['accented_heading'] = $accented_heading_field->value;
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function uwmbase_preprocess_page__node(&$variables) {
  if (!isset($variables['node'])) {
    return;
  }

  /* \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Determine if the page should have a diagonal gray background.
  $variables['diagonal_gray_bg'] = 0;

  if ($node->hasField('field_uwm_diagonal_gray_bg')) {
    $diagonal_gray_bg_field = $variables['node']->get('field_uwm_diagonal_gray_bg');

    if ($diagonal_gray_bg_field->value) {
      $variables['diagonal_gray_bg'] = $diagonal_gray_bg_field->value;
    }
  }
}

/**
 * Implements hook_preprocess_paragraph__uwm_block().
 */
function uwmbase_preprocess_paragraph__uwm_block(&$variables) {

  $paragraph = $variables['paragraph'];

  // Pass referenced block bundle or webform ID to parent paragraph template.
  // Display webform title as header.
  $variables['block_bundle'] = NULL;
  $variables['webform_id'] = NULL;
  $variables['webform_title'] = NULL;

  if (!$paragraph->get('field_uwm_block')->isEmpty()) {

    $block_id = $paragraph->get('field_uwm_block')
      ->first()
      ->getValue()['target_id'];
    $block_content = \Drupal::entityTypeManager()
      ->getStorage('block_content')
      ->load($block_id);

    if (!empty($block_content)) {
      $variables['block_bundle'] = $block_content->bundle();
    }

  }

  if (!$paragraph->get('field_webform')->isEmpty()) {

    $webform_id = $paragraph->get('field_webform')
      ->first()
      ->getValue()['target_id'];
    $webform = \Drupal::entityTypeManager()
      ->getStorage('webform')
      ->load($webform_id);

    if (!empty($webform)) {
      $variables['webform_id'] = $webform_id;
      $variables['webform_title'] = $webform->label();
    }

  }

}

/**
 * Implements hook_preprocess_paragraph__uwm_cta_link().
 */
function uwmbase_preprocess_paragraph__uwm_cta_link(&$variables) {

  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];

  // Extract link URL and title values for template.
  if (!empty($variables['content']['field_uwm_link'][0])) {
    $variables['field_uwm_link__url'] = $variables['content']['field_uwm_link'][0]['#url']->toString();
    $variables['field_uwm_link__title'] = $variables['content']['field_uwm_link'][0]['#title'];
  }

  // Create link attributes.
  $variables['link_attributes'] = new Attribute();

  // Define whether the CTA link should be fluid width.
  $variables['fluid_width'] = 0;
  if ($paragraph->hasField('field_uwm_fluid_width')) {
    $fluid_width_field = $paragraph->get('field_uwm_fluid_width');
    if (isset($fluid_width_field) && $fluid_width_field->first()) {
      $fluid_width_value = $fluid_width_field->first()->getValue();
      if (isset($fluid_width_value['value'])) {
        $variables['fluid_width'] = $fluid_width_value['value'];
      }
    }
  }

  // Determine whether to use solid CTA styling variant.
  // @see src/scss/base/_btn-cta-solid.scss
  // @TODO: might be nice to make this a boolean field on the paragraph too.
  $variables['btn_cta_solid'] = FALSE;

  // Enforce the case of parent Hero Content and Half-Wide Image paragraph.
  $parent = $paragraph->getParentEntity();
  if (!empty($parent)) {
    if ($parent->getEntityTypeId() === 'paragraph' && $parent->bundle() === 'half_wide_hero') {
      $variables['btn_cta_solid'] = TRUE;
    }
  }

}

/**
 * Implements hook_preprocess_field__paragraph__field_uwm_link__uwm_link().
 *
 * Customizes the "Book online" link text for providers that use open
 * scheduling.
 */
function uwmbase_preprocess_field__paragraph__field_uwm_link(&$variables) {
  if (!isset($variables['items'])) {
    return;
  }

  // Get the current URI and parse it.
  $uri_parts = UrlHelper::parse(\Drupal::request()->getRequestUri());

  $variables['#cache']['contexts'] = Cache::mergeContexts($variables['#cache']['contexts'], ['url.query_args:ser']);

  // Bail if a SER ID was not included in the query string.
  if (!isset($uri_parts['query']['ser'])) {
    return;
  }

  $ser = $uri_parts['query']['ser'];

  // Load the provider node from the SER ID.
  $node = _uwmbase_get_provider_by_ser($ser);
  if (!$node) {
    return;
  }

  foreach ($variables['items'] as &$item) {
    // Bail if the title does not exist or if it is not "Book online".
    if (!isset($item['content']['#title']) || $item['content']['#title'] != 'Book online') {
      continue;
    }

    // Add the provider's name to the Book Online text.
    $item['content']['#title'] .= ' with ' . trim($node->label());
  }
}

/**
 * Implements hook_preprocess_paragraph__uwm_link_with_icon__uwm_card().
 *
 * Customizes the "Book Now" URL for providers that use open scheduling.
 */
function uwmbase_preprocess_paragraph__uwm_link_with_icon__uwm_card(&$variables) {
  // Get the current URI and parse it.
  $uri_parts = UrlHelper::parse(\Drupal::request()->getRequestUri());

  $variables['#cache']['contexts'] = Cache::mergeContexts($variables['#cache']['contexts'], ['url.query_args:ser']);

  // Bail if a SER ID was not included in the query string.
  if (!isset($uri_parts['query']['ser'])) {
    return;
  }

  $ser = $uri_parts['query']['ser'];

  // Load the provider node from the SER ID.
  $node = _uwmbase_get_provider_by_ser($ser);
  if (!$node) {
    return;
  }

  // Bail if the URL does not exist or if it does not end with
  // "/openscheduling".
  if (!isset($variables['content']['field_uwm_link'][0]['#url']) || stripos(strrev($variables['content']['field_uwm_link'][0]['#url']->toUriString()), strrev('/openscheduling')) !== 0) {
    return;
  }

  // Update the URL with the provider's SER ID.
  $uri = $variables['content']['field_uwm_link'][0]['#url']->toUriString();
  $uri .= '/SignupAndSchedule/EmbeddedSchedule';
  $uri_options = [
    'query' => [
      'id' => $ser,
      'vt' => '9000',
      'view' => 'plain',
    ],
    'absolute' => TRUE,
  ];
  $variables['content']['field_uwm_link'][0]['#url'] = Url::fromUri($uri, $uri_options);
}

/**
 * Implements hook_preprocess_page_title().
 *
 * Customizes the page title.
 */
function uwmbase_preprocess_page_title(&$variables) {
  $currentPath = \Drupal::service('path.current')->getPath();

  // For the "Make an Appointment" page.
  if ($currentPath == '/node/20836') {
    // Get the current URI and parse it.
    $uri_parts = UrlHelper::parse(\Drupal::request()->getRequestUri());

    $variables['#cache']['contexts'] = Cache::mergeContexts($variables['#cache']['contexts'], ['url.query_args:ser']);

    if (isset($uri_parts['query']['ser'])) {
      $ser = $uri_parts['query']['ser'];

      // Load the provider node from the SER ID.
      $node = _uwmbase_get_provider_by_ser($ser);
      if ($node) {
        // Customize the link for the provider.
        $variables['title_suffix'] = [
          '#markup' => '<div class="make-appt-page__title-link"><a href="https://ecare.uwmedicine.org/prod01/openscheduling/SignupAndSchedule/EmbeddedSchedule?id=' . $ser . '&vt=9000&view=plain">Book online with ' . trim($node->label()) . '</a></div>',
          '#allowed_tags' => ['div', 'a'],
        ];
      }
    }
  }
}

/**
 * Implements hook_theme_suggestions_form_alter().
 */
function uwmbase_theme_suggestions_form_alter(array &$suggestions, array $variables) {

  if (_uwmbase_current_path_alias() === '/provider-resource') {
    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
  }

}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function uwmbase_theme_suggestions_form_element_alter(array &$suggestions, array $variables) {

  if ((!empty($_REQUEST['view_display_id']) && $_REQUEST['view_display_id'] == 'uwm_provider_resources_block') || strpos(_uwmbase_current_path_alias(), '/provider-resource') !== FALSE) {
    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
  }

}

/**
 * Implements hook_preprocess_webform().
 */
function uwmbase_preprocess_webform(&$variables) {

  $variables['#attached']['library'][] = 'uwmbase/webforms';

}

/**
 * Implements hook_theme_suggestions_views_view_alter().
 */
function uwmbase_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {

  $suggestions[] = sprintf('views_view__%s', $variables['view']->id());
  $suggestions[] = sprintf('views_view__%s__%s', $variables['view']->id(), $variables['view']->current_display);

  if (strpos(_uwmbase_current_path_alias(), '/provider-resource') !== FALSE) {
    $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
  }
}

/**
 * Implements hook_theme_suggestions_views_view_fields_alter().
 */
function uwmbase_theme_suggestions_views_view_fields_alter(array &$suggestions, array $variables) {

  $suggestions[] = sprintf('views_view_fields__%s', $variables['view']->id());
  $suggestions[] = sprintf('views_view_fields__%s__%s', $variables['view']->id(), $variables['view']->current_display);

}

/**
 * Implements template_preprocess_views_view().
 */
function uwmbase_preprocess_views_view(&$variables) {
  /** @var \Drupal\views\ViewExecutable $view_ex */
  $view_ex = $variables['view'];
  $variables['total_rows'] = $view_ex->total_rows;
  $variables['query_is_empty'] = (empty($_SERVER['QUERY_STRING']) || $_SERVER['QUERY_STRING'] == 's=');

  // Set a boolean for whether any exposed input form fields have a value, which
  // means the user has performed a search/filter.
  $variables['has_exposed_input_values'] = FALSE;
  foreach ($view_ex->getExposedInput() as $k => $v) {
    // Exposed input is parsed from the query string - a top-level value
    // could be an array, which represents multiple values for a key.
    if (is_array($v)) {
      foreach ($v as $multi_v) {
        if (!empty($multi_v)) {
          $variables['has_exposed_input_values'] = TRUE;
          break;
        }
      }
    }
    elseif (!empty($v)) {
      $variables['has_exposed_input_values'] = TRUE;
      break;
    }
  }

  // In results summary, change plural to singular if there's 1 result.
  if ($variables['total_rows'] == 1 && !empty($variables['header']['result']['#markup'])) {

    // Apply to Locations, Providers, General searches.
    $variables['header']['result']['#markup'] = str_replace(
      ['locations', 'providers', 'results'],
      ['location', 'provider', 'result'],
      $variables['header']['result']['#markup']
    );

  }

}

/**
 * Implements template_preprocess_views_view_fields().
 */
function uwmbase_preprocess_views_view_fields(&$variables) {

  $viewId = $variables['view']->id();
  $view = $variables['view'];
  $row = $variables['row'];

  if (stripos($viewId, 'search') !== FALSE) {

    if (!empty($row->_object) && method_exists($row->_object, 'get')) {

      $nid = $row->_object->get('nid')->value;
      $node = \Drupal::entityTypeManager()->getStorage('node')->load($nid);

      $variables['row']->nid = $nid;
      $variables['row']->node = $node;

      _uwmbase_node_prepare_uwm_url($node);

      $variables['row']->node_href = $node->uwm_url;

      // Format phone numbers from the raw field.
      // @TODO: Move this to a hook_node_load().
      if (!empty($variables['row']->search_api_excerpt) && ($val = $variables['row']->search_api_excerpt)) {
        if (is_string($val)) {
          $variables['row']->search_api_excerpt = _uwm_format_string_numbers($val);
        }
      }
      if (!empty($variables['row']->uwmcs_search_teaser_raw) && ($val = $variables['row']->uwmcs_search_teaser_raw)) {
        if (is_string($val)) {
          $variables['row']->uwmcs_search_teaser_raw = _uwm_format_string_numbers($val);
        }
      }
    }

  }

}

/**
 * Implements hook_theme_suggestions_views_view_field_alter().
 */
function uwmbase_theme_suggestions_views_view_field_alter(array &$suggestions, array $variables) {

  $suggestions[] = sprintf('views_view_field__%s', $variables['field']->field);
  $suggestions[] = sprintf('views_view_field__%s__%s', $variables['view']->id(), $variables['field']->field);

}

/**
 * Implements hook_theme_suggestions_form_element_alter().
 */
function uwmbase_theme_suggestions_bef_radios_alter(array &$suggestions, array $variables) {
  if (array_key_exists('view_display_id', $_REQUEST)) {
    if ($_REQUEST['view_display_id'] == 'uwm_provider_resources_block' ||
        strpos(_uwmbase_current_path_alias(), '/provider-resource') !== FALSE) {
      $suggestions[] = $variables['theme_hook_original'] . '__provider_resource';
    }
  }
}

/**
 * Implements hook_form_FORM_ID_form_alter().
 */
function uwmbase_form_views_exposed_form_alter(&$form, FormStateInterface $form_state) {

  /*
   * Limit the list of sub-specialties terms to the nodes which are returned in
   * the results
   */
  if ($form['#id'] == 'views-exposed-form-uwm-provider-resources-uwm-provider-resources-block') {

    // If the exposed filter does not exist on this form, there's
    // nothing we can do here.
    if (!array_key_exists('subspecialty', $form)) {
      return;
    }

    // Gather the view arguments from user input.
    $input = $form_state->getUserInput();
    $specialty = $input['specialty'];
    $type = $input['type'];
    $subspecialty = $input['subspecialty'];

    // Options are tag entity id => title.
    $options = $form['subspecialty']['#options'];

    // Load the media entities that match the user input arguments for
    // specialty and type.
    $query = \Drupal::entityQuery('media');
    $query->condition('bundle', [
      'uwm_provider_resource_video',
      'uwm_provider_resource_document',
    ], 'IN');
    // If specialty == all then we won't get any entity ids -
    // this is preferable.
    $query->condition('field_uwm_prov_res_specialty', $specialty);
    if ($type !== "All") {
      $query->condition('field_uwm_prov_res_media_type', $type);
    };
    $entity_ids = $query->execute();
    $mids = $entity_ids;

    // If we have a set of media ids to work with, limit the subspecialty
    // options to the subspecialties assigned to the filtered media ids.
    if ($mids) {
      $connection = Database::getConnection();
      $sth = $connection->select('media__field_uwm_prov_res_sub_specialty', 'uwm_provider_resource_video');
      $sth->addField('uwm_provider_resource_video', 'field_uwm_prov_res_sub_specialty_target_id');
      $sth->condition('entity_id', $mids, 'IN');
      $sth->groupBy('uwm_provider_resource_video.field_uwm_prov_res_sub_specialty_target_id');

      $data = $sth->execute();
      // Flip the result set so the array key is the tag entity id.
      $results = array_flip($data->fetchAll(\PDO::FETCH_COLUMN, 'field_uwm_prov_res_sub_specialty_target_id'));
    }

    $current_selection = $options[$subspecialty];
    $results['All'] = $options['All'];
    // Maintain current selection so we don't end up with an
    // 'illegal selection' error.
    $results[$subspecialty] = $current_selection;
    // Intersects the arrays, giving us back an "filtered" array.
    $options = array_intersect_key($options, $results);

    // Replace the options.
    $form['subspecialty']['#options'] = $options;
  }
}

/**
 * Checks string for phone numbers and formats them.
 *
 * @param string|null $string
 *   The string to search and replace on.
 *
 * @return mixed|string
 *   The formatted string.
 */
function _uwm_format_string_numbers(string $string = NULL) {

  $extension = new TwigExtension();
  $matches = [];
  preg_match_all('/([0-9]{10})/', $string, $matches);

  if (!empty($matches[0])) {
    foreach ($matches[0] as $match) {
      $formatted = $extension::formatPhone($match);
      $string = str_replace($match, $formatted, $string);

    }
  }

  return $string;

}

/**
 * Implements hook_preprocess_pager().
 *
 * - Set 'last_page_number' variable.
 */
function uwmbase_preprocess_pager(&$variables) {

  $element = $variables['pager']['#element'];

  // Retrieve the last page number as shown in template_preprocess_pager().
  global $pager_total;
  $variables['last_page_number'] = $pager_total[$element];

  // We are printing the first and last links as page numbers, not as "First"
  // and "Last" text. If the same page-number links are within the middle group
  // of links surrounding the current page, remove these so they don't appear as
  // duplicates.
  if (!empty($variables['items']['first']) && !empty($variables['items']['pages'][1])) {
    unset($variables['items']['pages'][1]);
  }
  if (!empty($variables['items']['last']) && !empty($variables['items']['pages'][$variables['last_page_number']])) {
    unset($variables['items']['pages'][$variables['last_page_number']]);
  }

}

/**
 * Load a provider from a SER ID.
 *
 * @param int $ser
 *   The SER ID.
 *
 * @return Drupal\node\Entity\Node
 *   The node for the found provider.
 */
function _uwmbase_get_provider_by_ser($ser) {
  $nodes = &drupal_static(__FUNCTION__);

  if (!isset($nodes[$ser])) {
    // Use the SER ID to look up the provider.
    $query = Drupal::service('entity.query')
      ->get('node')
      ->condition('status', 1)
      ->condition('field_res_ser_id', $ser);
    $results = $query->execute();
    if (empty($results)) {
      return NULL;
    }

    $nid = array_shift($results);

    // Load the provider node.
    $nodes[$ser] = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
  }

  return $nodes[$ser];
}
